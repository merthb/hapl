module Graph_tests where

import Graph
import Language.Haskell.Exts.Simple
import Data.HashSet hiding (map)
import Test.HUnit
import System.Exit

-- testing the graph build
allGraphBuildTests :: Test
allGraphBuildTests = TestLabel "Tests of the graph build" $ TestList testList

testList :: [Test]
testList = [
        TestLabel "Testing the function collector (parseFile)" $ TestList parseFileTests,
        TestLabel "Testing the preprocessor (prep)" $ TestList preprocessTests,
        TestLabel "Testing the function calls colletor (functionCalls)" $ TestList functionCallsTests,
        TestLabel "Testing the recursion flagging (flagRecursion)" $ TestList functionCallsTests,
        TestLabel "Testing the call-graph build for all functions separately (getCallGraphs)" $ TestList getCallGraphsTests,
        TestLabel "Testing the call-graph build for the whole code (wholeCodeGraphs)" $ TestList genWholeGraphTests
    ]

parseFileTests :: [Test]
parseFileTests = [
        (testFileEqual "tests/test_files/test1.hs" ["formationFix", "over", "applyDamage", "getHealth", "applyMageAttacks", "fight", "helper", "haskellBlast", "findBestStart", "potDam", "multiHeal", "remainHeal", "healOne", "isAlive", "healUnit", "battle", "showDuel"]),
        (testFileEqual "tests/test_files/test2.hs" ["formationFix", "isAlive", "isDead", "over", "hpCheck", "damageCal", "getHealth", "fight", "spellDamage", "haskellBlast", "bgroups", "blastGroup", "blastHelper", "applyDamage", "sorszam", "multiHeal", "healHelper", "heal", "isNonEmpty", "longerThan"]),
        (testFileEqual "tests/test_files/test3.hs" ["formationFix", "getDead", "getAlive", "over", "fight", "damage", "mageDamageOne", "mageDamage", "cast", "haskellBlast", "blastDamage", "checkBlastDamage", "healthDifference", "maxBlastDamage", "possibleBlastDamages", "getPosition", "alive", "firstAlive", "damageFive", "multiHeal", "healOne", "getHealAmount", "tooLong", "battle", "finalBattle", "oneTurn"]),
        (testFileEqual "tests/test_files/test4.hs" ["isUnitAlive", "getAliveUnits", "getDeadUnits", "formationFix", "over", "damageUnitBy", "damageUnitBySpell", "damageArmyBySpell", "fight", "getHealth", "dmgOnArea", "maxBlast", "haskellBlast", "helper", "countAliveUnits", "applyHealing", "allDead", "isUnitDead", "multiHeal", "helper", "getCurrentHealth", "battle", "damageArmyBy", "hasDeadUnit", "applyChainHealing", "applyChainDamage", "chain", "helper", "battleWithChain"]),
        (testFileEqual "tests/test_files/test5.hs" ["formationFix", "aliveTroops", "deadTroops", "over", "getHealth", "setHealth", "die", "fight", "castSpell", "haskellBlast", "haskellBlastHelper", "modifyHealths", "maximumdmg", "multiHeal", "multiHealHelper", "format"]),
        (testFileEqual "tests/test_files/test6.hs" ["formationFix", "isDead", "over", "getState", "setState", "seged", "makeDead", "fight", "bigBoiSum", "countHelper", "haskellBlast", "seged", "blast", "applyDamage", "decreaseHealth", "increaseHealth", "armyLength", "multiHeal", "seged", "rovidebb", "battle"]),
        (testFileEqual "tests/test_files/test7.hs" ["showState", "showMage", "eqMage", "showUnit", "papi", "java", "traktor", "jani", "skver", "potionMaster", "formationFix", "over", "damage", "heal", "setHealth", "getHealth", "dead", "applyDamage", "fight", "haskellDamage", "haskellBlast", "healable", "multiHeal", "chain", "showOneVOne"]),
        (testFileEqual "tests/test_files/test8.hs" ["formationFix", "over", "checkDead", "damage", "getDamage", "updateArmy", "fight", "getHealth", "healthDiffs", "bombIt", "calcSumDamage", "calcSums", "haskellBlast", "blastHelp", "heal", "isDead", "multiHeal", "multiHelp", "battle", "combineTupleOfLists", "chain", "chainHelp"]),
        (testFileEqual "tests/test_files/test9.hs" ["formationFix", "helper", "over", "fight", "helper", "getDamageE", "doDamage", "getSpell", "damageAllSpells", "haskellBlast", "getHealth", "sumHealth", "getAllSum", "damageNext5", "helper", "findAndDamage", "doMostDamage", "getAllSumZero", "multiHeal", "helper", "updateHp", "isDead", "battle", "finalBattle", "getHMDamage", "getMyDamage", "zeroIfNeg"]),
        (testFileEqual "tests/test_files/test10.hs" ["getHealthEntity", "setHealthEntity", "getHealthMage", "setHealthMage", "mageState", "entState", "formationFix", "formationHelper", "over", "fight", "mageFightHelp", "haskellBlast", "blastHelper", "sumoffivehp", "nextFiveAllDead", "minusfive", "listcount", "getUnitHealth", "minusfivetimesfive", "multiHeal", "healhelper", "healOne", "setUnitHealth", "isDead", "battle", "whyMyTeam", "notDeads", "chain", "chainHelper", "healN", "dmgN", "die", "battleWithChain", "maradek"])
    ] where
        testFileEqual path list =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "Function collection goes wrong." (all (\ x -> any (\ (F y _ _) -> x == y) (parseInFile decl)) list)
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

preprocessTests :: [Test]
preprocessTests = [
        (testFileTrue "tests/test_files/test1.hs"),
        (testFileTrue "tests/test_files/test2.hs"),
        (testFileTrue "tests/test_files/test3.hs"),
        (testFileTrue "tests/test_files/test4.hs"),
        (testFileTrue "tests/test_files/test5.hs"),
        (testFileTrue "tests/test_files/test6.hs"),
        (testFileTrue "tests/test_files/test7.hs"),
        (testFileTrue "tests/test_files/test8.hs"),
        (testFileTrue "tests/test_files/test9.hs"),
        (testFileTrue "tests/test_files/test10.hs")
    ] where
        testFileTrue path =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "Not all functions have different names after preprocess." (allDifferent $ parseInFile $ prep decl)
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

functionCallsTests :: [Test]
functionCallsTests = [
        (testFileEqual "tests/test_files/test1.hs"),
        (testFileEqual "tests/test_files/test2.hs"),
        (testFileEqual "tests/test_files/test3.hs"),
        (testFileEqual "tests/test_files/test4.hs"),
        (testFileEqual "tests/test_files/test5.hs"),
        (testFileEqual "tests/test_files/test6.hs"),
        (testFileEqual "tests/test_files/test7.hs"),
        (testFileEqual "tests/test_files/test8.hs"),
        (testFileEqual "tests/test_files/test9.hs"),
        (testFileEqual "tests/test_files/test10.hs")
    ] where
        testFileEqual path =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "Not all functions are in the dictionary." (all (\ (F x _ _) -> any (\ (F y _ _) -> x == y) (map fst (functionCalls (parseInFile $ prep decl) (parseInFile (prep decl) ++ map toFun preludeFuns) $ prep decl))) (parseInFile $ prep decl))
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

flagRecursionTests :: [Test]
flagRecursionTests = [
        (testFileEqual "tests/test_files/test1.hs"),
        (testFileEqual "tests/test_files/test2.hs"),
        (testFileEqual "tests/test_files/test3.hs"),
        (testFileEqual "tests/test_files/test4.hs"),
        (testFileEqual "tests/test_files/test5.hs"),
        (testFileEqual "tests/test_files/test6.hs"),
        (testFileEqual "tests/test_files/test7.hs"),
        (testFileEqual "tests/test_files/test8.hs"),
        (testFileEqual "tests/test_files/test9.hs"),
        (testFileEqual "tests/test_files/test10.hs")
    ] where
        testFileEqual path =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "At least one function should be set recursive, but it isn't." (any (\ (F _ _ b) -> b) (map fst (handleRecursion $ functionCalls (parseInFile (prep decl)) ((parseInFile (prep decl)) ++ map toFun preludeFuns) (prep decl))))
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

getCallGraphsTests :: [Test]
getCallGraphsTests = [
        (testFileEqual "tests/test_files/test1.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]}]},Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "findBestStart" "Int -> Int -> Int -> Int" True, edges = fromList []},Vertex {node = F "potDam" "Unit -> Int" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "showDuel" "OneVOne -> String" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test2.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "spellDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "spellDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "sorszam" "Army -> [(Unit, Int)]" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "bgroups" "Army -> [Int]" True, edges = fromList [Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "bgroups" "Army -> [Int]" True, edges = fromList [Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "sorszam" "Army -> [(Unit, Int)]" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "healHelper" "Health -> Army -> Int -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "longerThan" "Int -> [a] -> Bool" False, edges = fromList [Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []}]}]},Vertex {node = F "healHelper" "Health -> Army -> Int -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []},Vertex {node = F "longerThan" "Int -> [a] -> Bool" False, edges = fromList [Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []}]}]),
        (testFileEqual "tests/test_files/test3.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []},Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "alive" "Army -> Integer -> Bool" True, edges = fromList []},Vertex {node = F "firstAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]}]},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" False, edges = fromList [Vertex {node = F "oneTurn" "Health -> Health -> String -> OneVOne" True, edges = fromList []}]},Vertex {node = F "oneTurn" "Health -> Health -> String -> OneVOne" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test5.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "deadTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "aliveTroops" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "aliveTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "deadTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "castSpell" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "castSpell" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "maximumdmg" "[Integer] -> Integer" False, edges = fromList []},Vertex {node = F "haskellBlastHelper" "Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "modifyHealths" "Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlastHelper" "Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "modifyHealths" "Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "maximumdmg" "[Integer] -> Integer" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHealHelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "multiHealHelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "format" "String -> String" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test6.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]},Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]}]},Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]}]}]),
        (testFileEqual "tests/test_files/test7.hs" [Vertex {node = F "showState" "State a -> String" False, edges = fromList []},Vertex {node = F "showMage" "Mage -> String" False, edges = fromList []},Vertex {node = F "eqMage" "Mage -> Mage -> Bool" False, edges = fromList []},Vertex {node = F "showUnit" "Unit -> String" False, edges = fromList []},Vertex {node = F "papi" "Mage" False, edges = fromList []},Vertex {node = F "java" "Mage" False, edges = fromList []},Vertex {node = F "traktor" "Mage" False, edges = fromList []},Vertex {node = F "jani" "Mage" False, edges = fromList []},Vertex {node = F "skver" "Mage" False, edges = fromList []},Vertex {node = F "potionMaster" "Mage" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F ".f" "a -> b" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyDamage" "Unit -> Unit -> Unit" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyDamage" "Unit -> Unit -> Unit" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "...f" "a -> b -> c" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "...f" "a -> b -> c" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "next" "a -> b" False, edges = fromList []},Vertex {node = F "d" "a -> b" False, edges = fromList []}]},Vertex {node = F "next" "a -> b" False, edges = fromList [Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "d" "a -> b" False, edges = fromList []}]}]},Vertex {node = F "d" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "OneVOne -> String" False, edges = fromList []}]),
        (testFileEqual "tests/test_files/test8.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []},Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]},Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]),
        (testFileEqual "tests/test_files/test9.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []}]},Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" True, edges = fromList [Vertex {node = F "getMyDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "getHMDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]}]},Vertex {node = F "getHMDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "getMyDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}])
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (getCallGraphs (map (\ (F n _ _) -> n) $ parseInFile (prep decl)) (prep decl)) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

genWholeGraphTests :: [Test]
genWholeGraphTests = [
        (testFileEqual "tests/test_files/test1.hs" [F "getHealth" "Unit -> Health" False,F "eqMage" "a -> b -> c" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "showDuel" "OneVOne -> String" True,F "findBestStart" "Int -> Int -> Int -> Int" True,F "potDam" "Unit -> Int" False,F "showMage" "a -> b" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test2.hs" [F "formationFix" "Army -> Army" False,F "eqMage" "a -> b -> c" False,F "haskellBlast" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "showMage" "a -> b" False,F "over" "Army -> Bool" True,F "fight" "EnemyArmy -> Army -> Army" True,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test3.hs" [F "eqMage" "a -> b -> c" False,F "finalBattle" "Health -> Health -> OneVOne" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "alive" "Army -> Integer -> Bool" True,F "showMage" "a -> b" False,F "firstAlive" "Army -> Army" True,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test4.hs" [F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "getCurrentHealth" "Unit -> Health" False,F "damageArmyBy" "Integer -> Army -> Army" True,F "eqMage" "a -> b -> c" False,F "applyChainHealing" "Amount -> Army -> Army" True,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True,F "over" "Army -> Bool" False,F "applyChainDamage" "Amount -> Army -> Army" True,F "showMage" "a -> b" False,F "hasDeadUnit" "Army -> Bool" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test5.hs" [F "eqMage" "a -> b -> c" False,F "formationFix" "Army -> Army" False,F "format" "String -> String" True,F "multiHeal" "Health -> Army -> Army" False,F "showMage" "a -> b" False,F "over" "Army -> Bool" True,F "fight" "EnemyArmy -> Army -> Army" True,F "showOneVOne" "a -> b" False,F "haskellBlast" "Army -> Army" True,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test6.hs" [F "eqMage" "a -> b -> c" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "showMage" "a -> b" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test7.hs" [F "eqMage" "Mage -> Mage -> Bool" False,F "papi" "Mage" False,F "fight" "EnemyArmy -> Army -> Army" True,F "jani" "Mage" False,F "showOneVOne" "OneVOne -> String" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "traktor" "Mage" False,F "skver" "Mage" False,F "showMage" "Mage -> String" False,F "showUnit" "Unit -> String" False,F "java" "Mage" False,F ".f" "a -> b" False,F "showState" "State a -> String" False,F "potionMaster" "Mage" False,F "haskellBlast" "Army -> Army" False]),
        (testFileEqual "tests/test_files/test8.hs" [F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "eqMage" "a -> b -> c" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "showMage" "a -> b" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test9.hs" [F "eqMage" "a -> b -> c" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "isDead" "Unit -> Bool" False,F "finalBattle" "Health -> Health -> OneVOne" True,F "showMage" "a -> b" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False,F "showUnit" "a -> b" False]),
        (testFileEqual "tests/test_files/test10.hs" [F "mageState" "State Mage -> String" False,F "battle" "Army -> EnemyArmy -> Maybe Army" True,F "eqMage" "a -> b -> c" False,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True,F "over" "Army -> Bool" True,F "nextFiveAllDead" "Army -> Integer -> Bool" True,F "entState" "State Entity -> String" False,F "showOneVOne" "a -> b" False,F "showState" "a -> b" False])
    ] where
        testFileEqual path list =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "Root function list doesn't match." (all (\ f -> elem f ((\ (Vertex _ fs) -> map (\ (Vertex g _) -> g) $ Data.HashSet.toList fs) (wholeCodeGraph decl))) list)
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")