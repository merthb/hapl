module Graph_tests where

import Graph
import Language.Haskell.Exts.Simple
import Data.HashSet hiding (map)
import Test.HUnit
import System.Exit

-- testing the graph build
allGraphBuildTests :: Test
allGraphBuildTests = TestLabel "Tests of the graph build" $ TestList testList

testList :: [Test]
testList = [
        TestLabel "Testing the function collector (parseFile)" $ TestList parseFileTests,
        TestLabel "Testing the preprocessor (prep)" $ TestList preprocessTests,
        TestLabel "Testing the function calls colletor (functionCalls)" $ TestList functionCallsTests,
        TestLabel "Testing the recursion flagging (flagRecursion)" $ TestList functionCallsTests,
        TestLabel "Testing the call-graph build for all functions separately (getCallGraphs)" $ TestList getCallGraphsTests,
        TestLabel "Testing the call-graph build for the whole code (wholeCodeGraphs)" $ TestList genWholeGraphTests
    ]

parseFileTests :: [Test]
parseFileTests = [
        (testFileEqual "tests/test_files/test1.hs" [F "formationFix" "Army -> Army" False,F "over" "Army -> Bool" False,F "applyDamage" "Health -> Unit -> Unit" False,F "getHealth" "Unit -> Health" False,F "applyMageAttacks" "Unit -> MageAttacks -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" False,F "haskellBlast" "Army -> Army" False,F "findBestStart" "Int -> Int -> Int -> Int" False,F "potDam" "Unit -> Int" False,F "multiHeal" "Health -> Army -> Army" False,F "remainHeal" "Army -> Health -> Health" False,F "healOne" "Army -> Health -> Army" False,F "isAlive" "Unit -> Bool" False,F "healUnit" "Health -> Unit -> Unit" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "showDuel" "OneVOne -> String" False]),
        (testFileEqual "tests/test_files/test2.hs" [F "formationFix" "Army -> Army" False,F "isAlive" "Unit -> Bool" False,F "isDead" "Unit -> Bool" False,F "over" "Army -> Bool" False,F "hpCheck" "Unit -> Unit" False,F "damageCal" "Unit -> Integer -> Unit" False,F "getHealth" "Unit -> Health" False,F "fight" "EnemyArmy -> Army -> Army" False,F "spellDamage" "Army -> Spell -> Army" False,F "haskellBlast" "Army -> Army" False,F "bgroups" "Army -> [Int]" False,F "blastGroup" "Army -> Int -> Int" False,F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" False,F "applyDamage" "[Unit] -> [Unit]" False,F "sorszam" "Army -> [(Unit, Int)]" False,F "multiHeal" "Health -> Army -> Army" False,F "healHelper" "Health -> Army -> Int -> Army" False,F "heal" "Unit -> Health -> Unit" False,F "isNonEmpty" "[a] -> Bool" False,F "longerThan" "Int -> [a] -> Bool" False]),
        (testFileEqual "tests/test_files/test3.hs" [F "formationFix" "Army -> Army" False,F "getDead" "Army -> Army" False,F "getAlive" "Army -> Army" False,F "over" "Army -> Bool" False,F "fight" "EnemyArmy -> Army -> Army" False,F "damage" "Unit -> Integer -> Unit" False,F "mageDamageOne" "Spell -> Unit -> Unit" False,F "mageDamage" "Army -> Spell -> Army" False,F "cast" "Spell -> Unit -> Unit" False,F "haskellBlast" "Army -> Army" False,F "blastDamage" "Army -> Integer -> Army" False,F "checkBlastDamage" "Army -> Army -> Integer" False,F "healthDifference" "Unit -> Unit -> Integer" False,F "maxBlastDamage" "[(Integer, Integer)] -> Integer" False,F "possibleBlastDamages" "Army -> [Integer]" False,F "getPosition" "[Integer] -> [(Integer, Integer)]" False,F "alive" "Army -> Integer -> Bool" False,F "firstAlive" "Army -> Army" False,F "damageFive" "Army -> Integer -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "healOne" "Health -> Unit -> Unit" False,F "getHealAmount" "Integer -> Army -> Integer" False,F "tooLong" "Integer -> [a] -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "finalBattle" "Health -> Health -> OneVOne" False,F "oneTurn" "Health -> Health -> String -> OneVOne" False]),
        (testFileEqual "tests/test_files/test4.hs" [F "isUnitAlive" "Unit -> Bool" False,F "getAliveUnits" "Army -> Army" False,F "getDeadUnits" "Army -> Army" False,F "formationFix" "Army -> Army" False,F "over" "Army -> Bool" False,F "damageUnitBy" "Integer -> Unit -> Unit" False,F "damageUnitBySpell" "Unit -> Spell -> Unit" False,F "damageArmyBySpell" "Army -> Spell -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False,F "getHealth" "Unit -> Health" False,F "dmgOnArea" "Army -> Integer -> Health" False,F "maxBlast" "Army -> Health -> Health" False,F "haskellBlast" "Army -> Army" False,F "helper" "Army -> Int -> Army" False,F "countAliveUnits" "Army -> Integer" False,F "applyHealing" "Integer -> Unit -> Unit" False,F "allDead" "Army -> Bool" False,F "isUnitDead" "Unit -> Bool" False,F "multiHeal" "Health -> Army -> Army" False,F "helper" "Health -> Army -> Army -> Army" False,F "getCurrentHealth" "Unit -> Health" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "damageArmyBy" "Integer -> Army -> Army" False,F "hasDeadUnit" "Army -> Bool" False,F "applyChainHealing" "Amount -> Army -> Army" False,F "applyChainDamage" "Amount -> Army -> Army" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False]),
        (testFileEqual "tests/test_files/test5.hs" [F "formationFix" "Army -> Army" False,F "aliveTroops" "Army -> Army" False,F "deadTroops" "Army -> Army" False,F "over" "Army -> Bool" False,F "getHealth" "Unit -> Health" False,F "setHealth" "Unit -> Health -> Unit" False,F "die" "Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "castSpell" "Mage -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "haskellBlastHelper" "Army -> Army" False,F "modifyHealths" "Army -> Army" False,F "maximumdmg" "[Integer] -> Integer" False,F "multiHeal" "Health -> Army -> Army" False,F "multiHealHelper" "Health -> Army -> Army -> Army" False,F "format" "String -> String" False]),
        (testFileEqual "tests/test_files/test6.hs" [F "formationFix" "Army -> Army" False,F "isDead" "Unit -> Bool" False,F "over" "Army -> Bool" False,F "getState" "Unit -> Health" False,F "setState" "Unit -> Health -> Unit" False,F "seged" "Army -> Spell -> Army" False,F "makeDead" "Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "bigBoiSum" "[Int] -> [Int]" False,F "countHelper" "[Int] -> [Int]" False,F "haskellBlast" "Army -> Army" False,F "seged" "Army -> Army" False,F "blast" "Int -> Army -> Army" False,F "applyDamage" "Int -> Unit -> Unit" False,F "decreaseHealth" "Unit -> Health -> Unit" False,F "increaseHealth" "Unit -> Health -> Unit" False,F "armyLength" "Army -> Int" False,F "multiHeal" "Health -> Army -> Army" False,F "seged" "Health -> Army -> Int -> Int -> Army" False,F "rovidebb" "Army -> Integer -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False]),
        (testFileEqual "tests/test_files/test7.hs" [F "showState" "State a -> String" False,F "showMage" "Mage -> String" False,F "eqMage" "Mage -> Mage -> Bool" False,F "showUnit" "Unit -> String" False,F "papi" "Mage" False,F "java" "Mage" False,F "traktor" "Mage" False,F "jani" "Mage" False,F "skver" "Mage" False,F "potionMaster" "Mage" False,F "formationFix" "Army -> Army" False,F "over" "Army -> Bool" False,F "damage" "Unit -> Integer -> Unit" False,F "heal" "Unit -> Integer -> Unit" False,F "setHealth" "Unit -> Health -> Unit" False,F "getHealth" "Unit -> Health" False,F "dead" "Unit -> Unit" False,F "applyDamage" "Unit -> Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "haskellDamage" "Army -> Integer" False,F "haskellBlast" "Army -> Army" False,F "healable" "Unit -> Integer" False,F "multiHeal" "Health -> Army -> Army" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "showOneVOne" "OneVOne -> String" False]),
        (testFileEqual "tests/test_files/test8.hs" [F "formationFix" "Army -> Army" False,F "over" "Army -> Bool" False,F "checkDead" "Unit -> Unit" False,F "damage" "Unit -> Spell -> Unit" False,F "getDamage" "Unit -> Integer" False,F "updateArmy" "Army -> Spell -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False,F "getHealth" "Unit -> Health" False,F "healthDiffs" "[Health] -> [Health] -> [Health]" False,F "bombIt" "Army -> Integer -> Army" False,F "calcSumDamage" "Army -> Integer" False,F "calcSums" "Army -> [Integer]" False,F "haskellBlast" "Army -> Army" False,F "blastHelp" "Army -> Army -> Army" False,F "heal" "Unit -> Integer -> Unit" False,F "isDead" "Unit -> Bool" False,F "multiHeal" "Health -> Army -> Army" False,F "multiHelp" "Health -> Army -> Army -> Army" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),
        (testFileEqual "tests/test_files/test9.hs" [F "formationFix" "Army -> Army" False,F "helper" "Army -> Army -> Army" False,F "over" "Army -> Bool" False,F "fight" "EnemyArmy -> Army -> Army" False,F "helper" "EnemyArmy -> Army -> [Spell] -> Army" False,F "getDamageE" "Unit -> Amount" False,F "doDamage" "Amount -> Unit -> Unit" False,F "getSpell" "Unit -> Spell" False,F "damageAllSpells" "[Spell] -> Unit -> Unit" False,F "haskellBlast" "Army -> Army" False,F "getHealth" "Unit -> Health" False,F "sumHealth" "Army -> Health" False,F "getAllSum" "Army -> [Health]" False,F "damageNext5" "Army -> Army" False,F "helper" "Army -> Int -> Army" False,F "findAndDamage" "Army -> [Health] -> Army" False,F "doMostDamage" "Army -> [Health] -> Army" False,F "getAllSumZero" "Army -> [Health]" False,F "multiHeal" "Health -> Army -> Army" False,F "helper" "Health -> Army -> Army -> Army" False,F "updateHp" "Health -> Unit -> Unit" False,F "isDead" "Unit -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "finalBattle" "Health -> Health -> OneVOne" False,F "getHMDamage" "(Health, Health) -> (Health, Health)" False,F "getMyDamage" "(Health, Health) -> (Health, Health)" False,F "zeroIfNeg" "Health -> Health" False]),
        (testFileEqual "tests/test_files/test10.hs" [F "getHealthEntity" "Entity -> Health" False,F "setHealthEntity" "Entity -> Health -> Entity" False,F "getHealthMage" "Mage -> Health" False,F "setHealthMage" "Mage -> Health -> Mage" False,F "mageState" "State Mage -> String" False,F "entState" "State Entity -> String" False,F "formationFix" "Army -> Army" False,F "formationHelper" "Army -> Army -> Army -> Army" False,F "over" "Army -> Bool" False,F "fight" "EnemyArmy -> Army -> Army" False,F "mageFightHelp" "Mage -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "blastHelper" "Army -> Army -> Army" False,F "sumoffivehp" "Army -> Integer -> Health" False,F "nextFiveAllDead" "Army -> Integer -> Bool" False,F "minusfive" "Unit -> Unit" False,F "listcount" "Army -> Int" False,F "getUnitHealth" "Unit -> Health" False,F "minusfivetimesfive" "Army -> Int -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "healhelper" "Health -> Army -> Army -> Army" False,F "healOne" "Unit -> Unit" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "isDead" "Unit -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "whyMyTeam" "Army -> EnemyArmy -> Army" False,F "notDeads" "Army -> Army" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "healN" "Unit -> Health -> Unit" False,F "dmgN" "Unit -> Health -> Unit" False,F "die" "Unit -> Unit" False,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False,F "maradek" "OneVOne -> String" False])
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (parseInFile decl) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

preprocessTests :: [Test]
preprocessTests = [
        (testFileTrue "tests/test_files/test1.hs"),
        (testFileTrue "tests/test_files/test2.hs"),
        (testFileTrue "tests/test_files/test3.hs"),
        (testFileTrue "tests/test_files/test4.hs"),
        (testFileTrue "tests/test_files/test5.hs"),
        (testFileTrue "tests/test_files/test6.hs"),
        (testFileTrue "tests/test_files/test7.hs"),
        (testFileTrue "tests/test_files/test8.hs"),
        (testFileTrue "tests/test_files/test9.hs"),
        (testFileTrue "tests/test_files/test10.hs")
    ] where
        testFileTrue path =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertBool "Not all functions have different names after preprocess." (allDifferent $ parseInFile $ prep decl)
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

functionCallsTests :: [Test]
functionCallsTests = [
        (testFileEqual "tests/test_files/test1.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "." "" False,F "not" "" False]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False]),(F "applyDamage" "Health -> Unit -> Unit" False,[F "<=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "applyMageAttacks" "Unit -> MageAttacks -> Unit" False,[F "<=" "" False,F "applyMageAttacks" "Unit -> MageAttacks -> Unit" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" False]),(F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" False,[F "applyMageAttacks" "Unit -> MageAttacks -> Unit" False,F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" False,F "applyDamage" "Health -> Unit -> Unit" False,F "++" "" False]),(F "haskellBlast" "Army -> Army" False,[F "map" "" False,F "applyDamage" "Health -> Unit -> Unit" False,F "<" "" False,F "length" "" False,F "++" "" False]),(F "findBestStart" "Int -> Int -> Int -> Int" False,[F ">" "" False,F "length" "" False,F "findBestStart" "Int -> Int -> Int -> Int" False]),(F "potDam" "Unit -> Int" False,[F "min" "" False,F "fromIntegral" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<" "" False,F "==" "" False,F "remainHeal" "Army -> Health -> Health" False,F "healOne" "Army -> Health -> Army" False,F "multiHeal" "Health -> Army -> Army" False]),(F "remainHeal" "Army -> Health -> Health" False,[F "<=" "" False,F "remainHeal" "Army -> Health -> Health" False,F "isAlive" "Unit -> Bool" False]),(F "healOne" "Army -> Health -> Army" False,[F "<=" "" False,F "healUnit" "Health -> Unit -> Unit" False,F "healOne" "Army -> Health -> Army" False,F "isAlive" "Unit -> Bool" False]),(F "isAlive" "Unit -> Bool" False,[]),(F "healUnit" "Health -> Unit -> Unit" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "over" "Army -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "showDuel" "OneVOne -> String" False,[F "++" "" False,F "show" "" False,F "showDuel" "OneVOne -> String" False])]),
        (testFileEqual "tests/test_files/test2.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "isDead" "Unit -> Bool" False]),(F "isAlive" "Unit -> Bool" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "over" "Army -> Bool" False,[F "==" "" False,F "isAlive" "Unit -> Bool" False,F "over" "Army -> Bool" False]),(F "hpCheck" "Unit -> Unit" False,[F "<=" "" False]),(F "damageCal" "Unit -> Integer -> Unit" False,[F "<=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "fight" "EnemyArmy -> Army -> Army" False,F "isAlive" "Unit -> Bool" False,F "damageCal" "Unit -> Integer -> Unit" False,F "hpCheck" "Unit -> Unit" False,F "spellDamage" "Army -> Spell -> Army" False]),(F "spellDamage" "Army -> Spell -> Army" False,[F "hpCheck" "Unit -> Unit" False,F "spellDamage" "Army -> Spell -> Army" False]),(F "haskellBlast" "Army -> Army" False,[F "all" "" False,F "isDead" "Unit -> Bool" False,F "damageCal" "Unit -> Integer -> Unit" False,F "&&" "" False,F "isAlive" "Unit -> Bool" False,F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" False,F "bgroups" "Army -> [Int]" False,F "sorszam" "Army -> [(Unit, Int)]" False]),(F "bgroups" "Army -> [Int]" False,[F "blastGroup" "Army -> Int -> Int" False,F "take" "" False,F "bgroups" "Army -> [Int]" False,F "drop" "" False]),(F "blastGroup" "Army -> Int -> Int" False,[F "blastGroup" "Army -> Int -> Int" False,F ">=" "" False,F "getHealth" "Unit -> Health" False,F "fromInteger" "" False]),(F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" False,[F "++" "" False,F "applyDamage" "[Unit] -> [Unit]" False,F "take" "" False,F "map" "" False,F "fst" "" False,F "drop" "" False,F "==" "" False,F "maximum" "" False,F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" False]),(F "applyDamage" "[Unit] -> [Unit]" False,[F "hpCheck" "Unit -> Unit" False,F "damageCal" "Unit -> Integer -> Unit" False,F "applyDamage" "[Unit] -> [Unit]" False]),(F "sorszam" "Army -> [(Unit, Int)]" False,[F "zip" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "healHelper" "Health -> Army -> Int -> Army" False,F "fromIntegral" "" False,F "longerThan" "Int -> [a] -> Bool" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "length" "" False]),(F "healHelper" "Health -> Army -> Int -> Army" False,[F "<=" "" False,F "heal" "Unit -> Health -> Unit" False,F "healHelper" "Health -> Army -> Int -> Army" False,F "isAlive" "Unit -> Bool" False,F "fromIntegral" "" False,F "&&" "" False,F ">" "" False]),(F "heal" "Unit -> Health -> Unit" False,[]),(F "isNonEmpty" "[a] -> Bool" False,[]),(F "longerThan" "Int -> [a] -> Bool" False,[F "isNonEmpty" "[a] -> Bool" False,F "drop" "" False])]),
        (testFileEqual "tests/test_files/test3.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "getAlive" "Army -> Army" False,F "getDead" "Army -> Army" False]),(F "getDead" "Army -> Army" False,[F "getDead" "Army -> Army" False,F "||" "" False,F "==" "" False]),(F "getAlive" "Army -> Army" False,[F "getAlive" "Army -> Army" False]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False,F "||" "" False,F "==" "" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "++" "" False,F "damage" "Unit -> Integer -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "mageDamageOne" "Spell -> Unit -> Unit" False,F "mageDamage" "Army -> Spell -> Army" False,F "head" "" False,F "tail" "" False]),(F "damage" "Unit -> Integer -> Unit" False,[F "<=" "" False,F ">=" "" False]),(F "mageDamageOne" "Spell -> Unit -> Unit" False,[F "<=" "" False]),(F "mageDamage" "Army -> Spell -> Army" False,[F "cast" "Spell -> Unit -> Unit" False,F "mageDamage" "Army -> Spell -> Army" False]),(F "cast" "Spell -> Unit -> Unit" False,[F "<=" "" False]),(F "haskellBlast" "Army -> Army" False,[F "blastDamage" "Army -> Integer -> Army" False,F "maxBlastDamage" "[(Integer, Integer)] -> Integer" False,F "getPosition" "[Integer] -> [(Integer, Integer)]" False,F "possibleBlastDamages" "Army -> [Integer]" False]),(F "blastDamage" "Army -> Integer -> Army" False,[F "damage" "Unit -> Integer -> Unit" False,F "blastDamage" "Army -> Integer -> Army" False,F "<=" "" False]),(F "checkBlastDamage" "Army -> Army -> Integer" False,[F "==" "" False,F "healthDifference" "Unit -> Unit -> Integer" False,F "checkBlastDamage" "Army -> Army -> Integer" False]),(F "healthDifference" "Unit -> Unit -> Integer" False,[F "error" "" False]),(F "maxBlastDamage" "[(Integer, Integer)] -> Integer" False,[F "snd" "" False,F "maxBlastDamage" "[(Integer, Integer)] -> Integer" False,F ">" "" False,F "fst" "" False]),(F "possibleBlastDamages" "Army -> [Integer]" False,[F "checkBlastDamage" "Army -> Army -> Integer" False,F "damage" "Unit -> Integer -> Unit" False,F "damageFive" "Army -> Integer -> Army" False,F "++" "" False,F "possibleBlastDamages" "Army -> [Integer]" False,F ">=" "" False,F "length" "" False]),(F "getPosition" "[Integer] -> [(Integer, Integer)]" False,[F "zip" "" False]),(F "alive" "Army -> Integer -> Bool" False,[F "||" "" False,F "==" "" False,F "&&" "" False,F "alive" "Army -> Integer -> Bool" False]),(F "firstAlive" "Army -> Army" False,[F "firstAlive" "Army -> Army" False,F "&&" "" False,F "/=" "" False]),(F "damageFive" "Army -> Integer -> Army" False,[F "damage" "Unit -> Integer -> Unit" False,F "damageFive" "Army -> Integer -> Army" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "multiHeal" "Health -> Army -> Army" False,F "==" "" False,F "healOne" "Health -> Unit -> Unit" False,F "tooLong" "Integer -> [a] -> Bool" False,F "getAlive" "Army -> Army" False,F "getHealAmount" "Integer -> Army -> Integer" False,F "&&" "" False,F "/=" "" False]),(F "healOne" "Health -> Unit -> Unit" False,[]),(F "getHealAmount" "Integer -> Army -> Integer" False,[F "fromIntegral" "" False,F "length" "" False,F "getAlive" "Army -> Army" False,F "/=" "" False]),(F "tooLong" "Integer -> [a] -> Bool" False,[F "tooLong" "Integer -> [a] -> Bool" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "over" "Army -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "finalBattle" "Health -> Health -> OneVOne" False,[F "oneTurn" "Health -> Health -> String -> OneVOne" False]),(F "oneTurn" "Health -> Health -> String -> OneVOne" False,[F "<=" "" False,F "oneTurn" "Health -> Health -> String -> OneVOne" False,F "&&" "" False,F "==" "" False,F "<" "" False,F ">" "" False,F "error" "" False])]),
        (testFileEqual "tests/test_files/test4.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "isUnitAlive" "Unit -> Bool" False,[]),(F "getAliveUnits" "Army -> Army" False,[F "getAliveUnits" "Army -> Army" False,F "isUnitAlive" "Unit -> Bool" False]),(F "getDeadUnits" "Army -> Army" False,[F "getDeadUnits" "Army -> Army" False,F "isUnitAlive" "Unit -> Bool" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "getAliveUnits" "Army -> Army" False,F "getDeadUnits" "Army -> Army" False]),(F "over" "Army -> Bool" False,[F "==" "" False,F "getAliveUnits" "Army -> Army" False]),(F "damageUnitBy" "Integer -> Unit -> Unit" False,[F ">" "" False]),(F "damageUnitBySpell" "Unit -> Spell -> Unit" False,[F ">" "" False]),(F "damageArmyBySpell" "Army -> Spell -> Army" False,[F "damageUnitBySpell" "Unit -> Spell -> Unit" False,F "damageArmyBySpell" "Army -> Spell -> Army" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "damageUnitBySpell" "Unit -> Spell -> Unit" False,F "damageArmyBySpell" "Army -> Spell -> Army" False]),(F "getHealth" "Unit -> Health" False,[]),(F "dmgOnArea" "Army -> Integer -> Health" False,[F "dmgOnArea" "Army -> Integer -> Health" False,F ">" "" False,F "getHealth" "Unit -> Health" False]),(F "maxBlast" "Army -> Health -> Health" False,[F "maxBlast" "Army -> Health -> Health" False,F "tail" "" False,F "dmgOnArea" "Army -> Integer -> Health" False,F ">" "" False,F "==" "" False]),(F "haskellBlast" "Army -> Army" False,[F ".helper" "Army -> Int -> Army" False]),(F ".helper" "Army -> Int -> Army" False,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F ".helper" "Army -> Int -> Army" False,F "&&" "" False,F "==" "" False,F "dmgOnArea" "Army -> Integer -> Health" False,F "maxBlast" "Army -> Health -> Health" False,F ">" "" False,F "<" "" False]),(F "countAliveUnits" "Army -> Integer" False,[F "toInteger" "" False,F "length" "" False,F "getAliveUnits" "Army -> Army" False]),(F "applyHealing" "Integer -> Unit -> Unit" False,[]),(F "allDead" "Army -> Bool" False,[F "all" "" False,F "isUnitDead" "Unit -> Bool" False]),(F "isUnitDead" "Unit -> Bool" False,[]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "allDead" "Army -> Bool" False,F "..helper" "Health -> Army -> Army -> Army" False]),(F "..helper" "Health -> Army -> Army -> Army" False,[F "++" "" False,F "..helper" "Health -> Army -> Army -> Army" False,F "applyHealing" "Integer -> Unit -> Unit" False,F "isUnitAlive" "Unit -> Bool" False]),(F "getCurrentHealth" "Unit -> Health" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "==" "" False,F "countAliveUnits" "Army -> Integer" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "damageArmyBy" "Integer -> Army -> Army" False,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F "damageArmyBy" "Integer -> Army -> Army" False]),(F "hasDeadUnit" "Army -> Bool" False,[F "/=" "" False,F "length" "" False,F "getDeadUnits" "Army -> Army" False]),(F "applyChainHealing" "Amount -> Army -> Army" False,[F "applyHealing" "Integer -> Unit -> Unit" False,F "applyChainHealing" "Amount -> Army -> Army" False]),(F "applyChainDamage" "Amount -> Army -> Army" False,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F "applyChainDamage" "Amount -> Army -> Army" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<=" "" False,F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),(F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "reverse" "" False,F "fst" "" False,F "snd" "" False,F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "tail" "" False,F "head" "" False,F "damageUnitBy" "Integer -> Unit -> Unit" False,F "applyHealing" "Integer -> Unit -> Unit" False,F "&&" "" False,F "not" "" False,F "isUnitAlive" "Unit -> Bool" False,F "/=" "" False,F "==" "" False]),(F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "==" "" False,F "countAliveUnits" "Army -> Integer" False,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "fst" "" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False,F "snd" "" False])]),
        (testFileEqual "tests/test_files/test5.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "aliveTroops" "Army -> Army" False,F "deadTroops" "Army -> Army" False]),(F "aliveTroops" "Army -> Army" False,[F "aliveTroops" "Army -> Army" False]),(F "deadTroops" "Army -> Army" False,[F "deadTroops" "Army -> Army" False]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False]),(F "getHealth" "Unit -> Health" False,[]),(F "setHealth" "Unit -> Health -> Unit" False,[F ">" "" False]),(F "die" "Unit -> Unit" False,[]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "die" "Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "<=" "" False,F "getHealth" "Unit -> Health" False,F "setHealth" "Unit -> Health -> Unit" False,F "head" "" False,F "castSpell" "Mage -> Army -> Army" False,F "tail" "" False]),(F "castSpell" "Mage -> Army -> Army" False,[F "castSpell" "Mage -> Army -> Army" False,F "<=" "" False,F "getHealth" "Unit -> Health" False]),(F "haskellBlast" "Army -> Army" False,[F "setHealth" "Unit -> Health -> Unit" False,F "++" "" False,F "haskellBlastHelper" "Army -> Army" False,F "take" "" False,F "drop" "" False,F "==" "" False,F "sum" "" False,F "map" "" False,F "getHealth" "Unit -> Health" False,F "haskellBlast" "Army -> Army" False,F "modifyHealths" "Army -> Army" False,F "maximumdmg" "[Integer] -> Integer" False]),(F "haskellBlastHelper" "Army -> Army" False,[F "setHealth" "Unit -> Health -> Unit" False,F "haskellBlastHelper" "Army -> Army" False]),(F "modifyHealths" "Army -> Army" False,[F "modifyHealths" "Army -> Army" False,F "<=" "" False,F "getHealth" "Unit -> Health" False,F "setHealth" "Unit -> Health -> Unit" False]),(F "maximumdmg" "[Integer] -> Integer" False,[F "maximum" "" False,F "sum" "" False,F "take" "" False,F "drop" "" False,F "length" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<" "" False,F "multiHealHelper" "Health -> Army -> Army -> Army" False]),(F "multiHealHelper" "Health -> Army -> Army -> Army" False,[F "++" "" False,F "multiHealHelper" "Health -> Army -> Army -> Army" False,F "setHealth" "Unit -> Health -> Unit" False]),(F "format" "String -> String" False,[F "format" "String -> String" False,F "==" "" False])]),
        (testFileEqual "tests/test_files/test6.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "a -> b" False,F "isDead" "Unit -> Bool" False]),(F "isAlive" "a -> b" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "over" "Army -> Bool" False,[F "not" "" False,F "isDead" "Unit -> Bool" False,F "over" "Army -> Bool" False]),(F "getState" "Unit -> Health" False,[]),(F "setState" "Unit -> Health -> Unit" False,[]),(F "seged" "Army -> Spell -> Army" False,[F "setState" "Unit -> Health -> Unit" False,F "getState" "Unit -> Health" False,F "seged" "Army -> Spell -> Army" False,F ">" "" False,F "makeDead" "Unit -> Unit" False]),(F "makeDead" "Unit -> Unit" False,[]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "makeDead" "Unit -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "<=" "" False,F "seged" "Army -> Spell -> Army" False]),(F "bigBoiSum" "[Int] -> [Int]" False,[F "countHelper" "[Int] -> [Int]" False]),(F "countHelper" "[Int] -> [Int]" False,[F "sum" "" False,F "take" "" False,F "map" "" False,F "min" "" False,F "countHelper" "[Int] -> [Int]" False,F "drop" "" False,F ">=" "" False,F "length" "" False]),(F "haskellBlast" "Army -> Army" False,[F ".seged" "Army -> Army" False]),(F ".seged" "Army -> Army" False,[F "blast" "Int -> Army -> Army" False,F "maximum" "" False,F "/=" "" False,F "map" "" False,F "decreaseHealth" "Unit -> Health -> Unit" False,F "bigBoiSum" "[Int] -> [Int]" False,F "." "" False,F "fromIntegral" "" False,F "getState" "Unit -> Health" False]),(F "blast" "Int -> Army -> Army" False,[F "map" "" False,F "&&" "" False,F ">=" "" False,F "<=" "" False,F "applyDamage" "Int -> Unit -> Unit" False,F "zip" "" False]),(F "applyDamage" "Int -> Unit -> Unit" False,[F "<=" "" False,F "fromIntegral" "" False]),(F "decreaseHealth" "Unit -> Health -> Unit" False,[F "<=" "" False]),(F "increaseHealth" "Unit -> Health -> Unit" False,[]),(F "armyLength" "Army -> Int" False,[F "armyLength" "Army -> Int" False,F "." "" False,F "not" "" False,F "isDead" "Unit -> Bool" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "increaseHealth" "Unit -> Health -> Unit" False,F "..seged" "Health -> Army -> Int -> Int -> Army" False,F "fromIntegral" "" False,F "armyLength" "Army -> Int" False]),(F "..seged" "Health -> Army -> Int -> Int -> Army" False,[F "..seged" "Health -> Army -> Int -> Int -> Army" False,F "isDead" "Unit -> Bool" False,F "increaseHealth" "Unit -> Health -> Unit" False,F "&&" "" False,F "not" "" False,F "rovidebb" "Army -> Integer -> Bool" False,F ">" "" False,F "fromIntegral" "" False,F "." "" False,F "==" "" False]),(F "rovidebb" "Army -> Integer -> Bool" False,[F "rovidebb" "Army -> Integer -> Bool" False,F "." "" False,F "not" "" False,F "isDead" "Unit -> Bool" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "over" "Army -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False])]),
        (testFileEqual "tests/test_files/test7.hs" [(F "showState" "State a -> String" False,[F "show" "" False]),(F "showMage" "Mage -> String" False,[F "show" "" False]),(F "eqMage" "Mage -> Mage -> Bool" False,[F "==" "" False]),(F "showUnit" "Unit -> String" False,[F "show" "" False]),(F "papi" "Mage" False,[]),(F "java" "Mage" False,[]),(F "traktor" "Mage" False,[]),(F "jani" "Mage" False,[]),(F "skver" "Mage" False,[]),(F "potionMaster" "Mage" False,[]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "." "" False,F "not" "" False]),(F ".f" "a -> b" False,[]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False]),(F "damage" "Unit -> Integer -> Unit" False,[F "<" "" False,F "setHealth" "Unit -> Health -> Unit" False,F "getHealth" "Unit -> Health" False]),(F "heal" "Unit -> Integer -> Unit" False,[F "<" "" False,F "setHealth" "Unit -> Health -> Unit" False,F "getHealth" "Unit -> Health" False]),(F "setHealth" "Unit -> Health -> Unit" False,[F "dead" "Unit -> Unit" False]),(F "getHealth" "Unit -> Health" False,[]),(F "dead" "Unit -> Unit" False,[F "<" "" False]),(F "applyDamage" "Unit -> Unit -> Unit" False,[F "dead" "Unit -> Unit" False,F "damage" "Unit -> Integer -> Unit" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "setHealth" "Unit -> Health -> Unit" False,F "f" "a -> b -> c -> d" False,F "getHealth" "Unit -> Health" False,F "fight" "EnemyArmy -> Army -> Army" False,F "map" "" False,F "applyDamage" "Unit -> Unit -> Unit" False]),(F "haskellDamage" "Army -> Integer" False,[F "foldl" "" False,F "..f" "a -> b -> c" False]),(F "..f" "a -> b -> c" False,[F "min" "" False,F "getHealth" "Unit -> Health" False]),(F "haskellBlast" "Army -> Army" False,[F "snd" "" False,F "...f" "a -> b -> c" False]),(F "...f" "a -> b -> c" False,[F "null" "" False,F "...f" "a -> b -> c" False,F ">" "" False,F "fst" "" False,F "take" "" False,F "drop" "" False,F "haskellDamage" "Army -> Integer" False,F "++" "" False,F "map" "" False,F "damage" "Unit -> Integer -> Unit" False]),(F "healable" "Unit -> Integer" False,[F "==" "" False,F "getHealth" "Unit -> Health" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "f" "a -> b -> c -> d" False]),(F "f" "a -> b -> c -> d" False,[F "over" "Army -> Bool" False,F "f" "a -> b -> c -> d" False,F "==" "" False,F "take" "" False,F "healable" "Unit -> Integer" False,F "!!" "" False,F "++" "" False,F "heal" "Unit -> Integer -> Unit" False,F "drop" "" False,F ">" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "heal" "Unit -> Integer -> Unit" False,F "<" "" False,F "d" "a -> b" False,F "fst" "" False,F "next" "a -> b" False,F "damage" "Unit -> Integer -> Unit" False,F "snd" "" False]),(F "next" "a -> b" False,[F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),(F "d" "a -> b" False,[]),(F "showOneVOne" "OneVOne -> String" False,[F "show" "" False])]),
        (testFileEqual "tests/test_files/test8.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "&&" "" False,F "/=" "" False,F "||" "" False,F "==" "" False]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False,F "||" "" False,F "==" "" False]),(F "checkDead" "Unit -> Unit" False,[F "<=" "" False]),(F "damage" "Unit -> Spell -> Unit" False,[F "checkDead" "Unit -> Unit" False]),(F "getDamage" "Unit -> Integer" False,[]),(F "updateArmy" "Army -> Spell -> Army" False,[F "damage" "Unit -> Spell -> Unit" False,F "updateArmy" "Army -> Spell -> Army" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "damage" "Unit -> Spell -> Unit" False,F "fight" "EnemyArmy -> Army -> Army" False,F "updateArmy" "Army -> Spell -> Army" False,F "getDamage" "Unit -> Integer" False]),(F "getHealth" "Unit -> Health" False,[]),(F "healthDiffs" "[Health] -> [Health] -> [Health]" False,[F "healthDiffs" "[Health] -> [Health] -> [Health]" False]),(F "bombIt" "Army -> Integer -> Army" False,[F "damage" "Unit -> Spell -> Unit" False,F "bombIt" "Army -> Integer -> Army" False]),(F "calcSumDamage" "Army -> Integer" False,[F "sum" "" False,F "healthDiffs" "[Health] -> [Health] -> [Health]" False,F "map" "" False,F "getHealth" "Unit -> Health" False,F "bombIt" "Army -> Integer -> Army" False]),(F "calcSums" "Army -> [Integer]" False,[F "calcSumDamage" "Army -> Integer" False,F "calcSums" "Army -> [Integer]" False]),(F "haskellBlast" "Army -> Army" False,[F "over" "Army -> Bool" False,F "blastHelp" "Army -> Army -> Army" False]),(F "blastHelp" "Army -> Army -> Army" False,[F "bombIt" "Army -> Integer -> Army" False,F "over" "Army -> Bool" False,F "++" "" False,F "==" "" False,F "calcSumDamage" "Army -> Integer" False,F "maximum" "" False,F "calcSums" "Army -> [Integer]" False,F "blastHelp" "Army -> Army -> Army" False]),(F "heal" "Unit -> Integer -> Unit" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "multiHeal" "Health -> Army -> Army" False,[F "over" "Army -> Bool" False,F "<" "" False,F "multiHelp" "Health -> Army -> Army -> Army" False]),(F "multiHelp" "Health -> Army -> Army -> Army" False,[F "++" "" False,F "multiHelp" "Health -> Army -> Army -> Army" False,F "isDead" "Unit -> Bool" False,F "heal" "Unit -> Integer -> Unit" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "over" "Army -> Bool" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "++" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<" "" False,F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),(F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "damage" "Unit -> Spell -> Unit" False,F "/=" "" False,F "heal" "Unit -> Integer -> Unit" False,F "==" "" False,F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "&&" "" False,F "isDead" "Unit -> Bool" False])]),
        (testFileEqual "tests/test_files/test9.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F ".helper" "Army -> Army -> Army" False]),(F ".helper" "Army -> Army -> Army" False,[F "reverse" "" False,F ".helper" "Army -> Army -> Army" False]),(F "over" "Army -> Bool" False,[F "over" "Army -> Bool" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" False]),(F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" False,[F "damageAllSpells" "[Spell] -> Unit -> Unit" False,F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" False,F "doDamage" "Amount -> Unit -> Unit" False,F "getDamageE" "Unit -> Amount" False,F "getSpell" "Unit -> Spell" False]),(F "getDamageE" "Unit -> Amount" False,[]),(F "doDamage" "Amount -> Unit -> Unit" False,[F "<" "" False]),(F "getSpell" "Unit -> Spell" False,[F "id" "" False]),(F "damageAllSpells" "[Spell] -> Unit -> Unit" False,[F "<" "" False,F "damageAllSpells" "[Spell] -> Unit -> Unit" False]),(F "haskellBlast" "Army -> Army" False,[F "damageNext5" "Army -> Army" False,F "<" "" False,F "length" "" False,F "doMostDamage" "Army -> [Health] -> Army" False,F "getAllSumZero" "Army -> [Health]" False,F "==" "" False,F "maximum" "" False,F "getAllSum" "Army -> [Health]" False,F "findAndDamage" "Army -> [Health] -> Army" False,F ">=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "sumHealth" "Army -> Health" False,[F "getHealth" "Unit -> Health" False,F "sumHealth" "Army -> Health" False]),(F "getAllSum" "Army -> [Health]" False,[F "getAllSum" "Army -> [Health]" False,F "tail" "" False,F "any" "" False,F "take" "" False,F "map" "" False,F "getHealth" "Unit -> Health" False,F "sumHealth" "Army -> Health" False]),(F "damageNext5" "Army -> Army" False,[F "...helper" "Army -> Int -> Army" False]),(F "...helper" "Army -> Int -> Army" False,[F "==" "" False,F "doDamage" "Amount -> Unit -> Unit" False,F "...helper" "Army -> Int -> Army" False]),(F "findAndDamage" "Army -> [Health] -> Army" False,[F "damageNext5" "Army -> Army" False,F ">=" "" False,F "findAndDamage" "Army -> [Health] -> Army" False]),(F "doMostDamage" "Army -> [Health] -> Army" False,[F "damageNext5" "Army -> Army" False,F "==" "" False,F "maximum" "" False,F "getAllSumZero" "Army -> [Health]" False,F "doMostDamage" "Army -> [Health] -> Army" False]),(F "getAllSumZero" "Army -> [Health]" False,[F "sumHealth" "Army -> Health" False,F "take" "" False,F "getAllSumZero" "Army -> [Health]" False,F "tail" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<" "" False,F "over" "Army -> Bool" False,F "helper" "Health -> Army -> Army -> Army" False]),(F "helper" "Health -> Army -> Army -> Army" False,[F "multiHeal" "Health -> Army -> Army" False,F "reverse" "" False,F "++" "" False,F "helper" "Health -> Army -> Army -> Army" False,F "updateHp" "Health -> Unit -> Unit" False]),(F "updateHp" "Health -> Unit -> Unit" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "over" "Army -> Bool" False,F "not" "" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "finalBattle" "Health -> Health -> OneVOne" False,[F "<=" "" False,F "fst" "" False,F "finalBattle" "Health -> Health -> OneVOne" False,F "getMyDamage" "(Health, Health) -> (Health, Health)" False,F "snd" "" False,F "getHMDamage" "(Health, Health) -> (Health, Health)" False]),(F "getHMDamage" "(Health, Health) -> (Health, Health)" False,[F "<" "" False,F "&&" "" False,F ">=" "" False,F ">" "" False,F "zeroIfNeg" "Health -> Health" False]),(F "getMyDamage" "(Health, Health) -> (Health, Health)" False,[F "<" "" False,F ">" "" False,F "zeroIfNeg" "Health -> Health" False]),(F "zeroIfNeg" "Health -> Health" False,[F "<" "" False])]),
        (testFileEqual "tests/test_files/test10.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "getHealthEntity" "Entity -> Health" False,[]),(F "setHealthEntity" "Entity -> Health -> Entity" False,[]),(F "getHealthMage" "Mage -> Health" False,[]),(F "setHealthMage" "Mage -> Health -> Mage" False,[]),(F "mageState" "State Mage -> String" False,[F "showMage" "a -> b" False]),(F "entState" "State Entity -> String" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "formationHelper" "Army -> Army -> Army -> Army" False]),(F "formationHelper" "Army -> Army -> Army -> Army" False,[F "++" "" False,F "formationHelper" "Army -> Army -> Army -> Army" False,F "==" "" False,F "showUnit" "a -> b" False]),(F "over" "Army -> Bool" False,[F "&&" "" False,F "==" "" False,F "showUnit" "a -> b" False,F "over" "Army -> Bool" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "++" "" False,F "fight" "EnemyArmy -> Army -> Army" False,F "isDead" "Unit -> Bool" False,F "die" "Unit -> Unit" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "mageFightHelp" "Mage -> Army -> Army" False]),(F "mageFightHelp" "Mage -> Army -> Army" False,[F "++" "" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F "mageFightHelp" "Mage -> Army -> Army" False,F ">" "" False,F "die" "Unit -> Unit" False]),(F "haskellBlast" "Army -> Army" False,[F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F ">" "" False,F "die" "Unit -> Unit" False,F "++" "" False,F "minusfive" "Unit -> Unit" False,F "haskellBlast" "Army -> Army" False,F "<=" "" False,F "listcount" "Army -> Int" False,F "reverse" "" False,F "drop" "" False,F "minusfivetimesfive" "Army -> Int -> Army" False,F "blastHelper" "Army -> Army -> Army" False]),(F "blastHelper" "Army -> Army -> Army" False,[F "max" "" False,F "blastHelper" "Army -> Army -> Army" False,F ">" "" False,F "sumoffivehp" "Army -> Integer -> Health" False]),(F "sumoffivehp" "Army -> Integer -> Health" False,[F "sumoffivehp" "Army -> Integer -> Health" False,F "isDead" "Unit -> Bool" False,F ">=" "" False,F "getUnitHealth" "Unit -> Health" False]),(F "nextFiveAllDead" "Army -> Integer -> Bool" False,[F "&&" "" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False,F "nextFiveAllDead" "Army -> Integer -> Bool" False]),(F "minusfive" "Unit -> Unit" False,[F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F ">" "" False,F "die" "Unit -> Unit" False]),(F "listcount" "Army -> Int" False,[F "listcount" "Army -> Int" False]),(F "getUnitHealth" "Unit -> Health" False,[F "getHealthEntity" "Entity -> Health" False,F "getHealthMage" "Mage -> Health" False]),(F "minusfivetimesfive" "Army -> Int -> Army" False,[F "minusfivetimesfive" "Army -> Int -> Army" False,F "isDead" "Unit -> Bool" False,F "minusfive" "Unit -> Unit" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "isDead" "Unit -> Bool" False,F "multiHeal" "Health -> Army -> Army" False,F "healOne" "Unit -> Unit" False,F "healhelper" "Health -> Army -> Army -> Army" False]),(F "healhelper" "Health -> Army -> Army -> Army" False,[F "++" "" False,F "maradek" "OneVOne -> String" False,F "==" "" False,F "notDeads" "Army -> Army" False,F "healhelper" "Health -> Army -> Army -> Army" False,F "isDead" "Unit -> Bool" False,F "healOne" "Unit -> Unit" False]),(F "healOne" "Unit -> Unit" False,[F "isDead" "Unit -> Bool" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False]),(F "setUnitHealth" "Unit -> Health -> Unit" False,[F "setHealthEntity" "Entity -> Health -> Entity" False,F "setHealthMage" "Mage -> Health -> Mage" False]),(F "isDead" "Unit -> Bool" False,[F "==" "" False,F "show" "" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "==" "" False,F "notDeads" "Army -> Army" False,F "battle" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "whyMyTeam" "Army -> EnemyArmy -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "whyMyTeam" "Army -> EnemyArmy -> Army" False,[F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "notDeads" "Army -> Army" False,[F "filter" "" False,F "not" "" False,F "==" "" False,F "show" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<=" "" False,F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),(F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "++" "" False,F "healN" "Unit -> Health -> Unit" False,F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "&&" "" False,F "isDead" "Unit -> Bool" False,F "dmgN" "Unit -> Health -> Unit" False,F ">" "" False]),(F "healN" "Unit -> Health -> Unit" False,[F "isDead" "Unit -> Bool" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False]),(F "dmgN" "Unit -> Health -> Unit" False,[F "isDead" "Unit -> Bool" False,F "die" "Unit -> Unit" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False,F "setUnitHealth" "Unit -> Health -> Unit" False]),(F "die" "Unit -> Unit" False,[]),(F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False,[F "&&" "" False,F "==" "" False,F "notDeads" "Army -> Army" False,F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" False,F "formationFix" "Army -> Army" False,F "fst" "" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "whyMyTeam" "Army -> EnemyArmy -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False,F "snd" "" False]),(F "maradek" "OneVOne -> String" False,[F "++" "" False,F "show" "" False,F "maradek" "OneVOne -> String" False])])
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (functionCalls (parseInFile $ prep decl) (parseInFile (prep decl) ++ map toFun preludeFuns) $ prep decl) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

flagRecursionTests :: [Test]
flagRecursionTests = [
        (testFileEqual "tests/test_files/test1.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "." "" False,F "not" "" False]),(F "over" "Army -> Bool" True,[]),(F "applyDamage" "Health -> Unit -> Unit" False,[F "<=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True,[F "<=" "" False]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True]),(F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True,[F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True,F "applyDamage" "Health -> Unit -> Unit" False,F "++" "" False]),(F "haskellBlast" "Army -> Army" False,[F "map" "" False,F "applyDamage" "Health -> Unit -> Unit" False,F "<" "" False,F "length" "" False,F "++" "" False]),(F "findBestStart" "Int -> Int -> Int -> Int" True,[F ">" "" False,F "length" "" False]),(F "potDam" "Unit -> Int" False,[F "min" "" False,F "fromIntegral" "" False]),(F "multiHeal" "Health -> Army -> Army" True,[F "<" "" False,F "==" "" False,F "remainHeal" "Army -> Health -> Health" True,F "healOne" "Army -> Health -> Army" True]),(F "remainHeal" "Army -> Health -> Health" True,[F "<=" "" False,F "isAlive" "Unit -> Bool" False]),(F "healOne" "Army -> Health -> Army" True,[F "<=" "" False,F "healUnit" "Health -> Unit -> Unit" False,F "isAlive" "Unit -> Bool" False]),(F "isAlive" "Unit -> Bool" False,[]),(F "healUnit" "Health -> Unit -> Unit" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "over" "Army -> Bool" True,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" True,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "showDuel" "OneVOne -> String" True,[F "++" "" False,F "show" "" False])]),
        (testFileEqual "tests/test_files/test2.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "isDead" "Unit -> Bool" False]),(F "isAlive" "Unit -> Bool" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "over" "Army -> Bool" True,[F "==" "" False,F "isAlive" "Unit -> Bool" False]),(F "hpCheck" "Unit -> Unit" False,[F "<=" "" False]),(F "damageCal" "Unit -> Integer -> Unit" False,[F "<=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "isAlive" "Unit -> Bool" False,F "damageCal" "Unit -> Integer -> Unit" False,F "hpCheck" "Unit -> Unit" False,F "spellDamage" "Army -> Spell -> Army" True]),(F "spellDamage" "Army -> Spell -> Army" True,[F "hpCheck" "Unit -> Unit" False]),(F "haskellBlast" "Army -> Army" False,[F "all" "" False,F "isDead" "Unit -> Bool" False,F "damageCal" "Unit -> Integer -> Unit" False,F "&&" "" False,F "isAlive" "Unit -> Bool" False,F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True,F "bgroups" "Army -> [Int]" True,F "sorszam" "Army -> [(Unit, Int)]" False]),(F "bgroups" "Army -> [Int]" True,[F "blastGroup" "Army -> Int -> Int" True,F "take" "" False,F "drop" "" False]),(F "blastGroup" "Army -> Int -> Int" True,[F ">=" "" False,F "getHealth" "Unit -> Health" False,F "fromInteger" "" False]),(F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True,[F "++" "" False,F "applyDamage" "[Unit] -> [Unit]" True,F "take" "" False,F "map" "" False,F "fst" "" False,F "drop" "" False,F "==" "" False,F "maximum" "" False]),(F "applyDamage" "[Unit] -> [Unit]" True,[F "hpCheck" "Unit -> Unit" False,F "damageCal" "Unit -> Integer -> Unit" False]),(F "sorszam" "Army -> [(Unit, Int)]" False,[F "zip" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "healHelper" "Health -> Army -> Int -> Army" True,F "fromIntegral" "" False,F "longerThan" "Int -> [a] -> Bool" False,F "filter" "" False,F "isAlive" "Unit -> Bool" False,F "length" "" False]),(F "healHelper" "Health -> Army -> Int -> Army" True,[F "<=" "" False,F "heal" "Unit -> Health -> Unit" False,F "isAlive" "Unit -> Bool" False,F "fromIntegral" "" False,F "&&" "" False,F ">" "" False]),(F "heal" "Unit -> Health -> Unit" False,[]),(F "isNonEmpty" "[a] -> Bool" False,[]),(F "longerThan" "Int -> [a] -> Bool" False,[F "isNonEmpty" "[a] -> Bool" False,F "drop" "" False])]),
        (testFileEqual "tests/test_files/test3.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "getAlive" "Army -> Army" True,F "getDead" "Army -> Army" True]),(F "getDead" "Army -> Army" True,[F "||" "" False,F "==" "" False]),(F "getAlive" "Army -> Army" True,[]),(F "over" "Army -> Bool" True,[F "||" "" False,F "==" "" False]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "++" "" False,F "damage" "Unit -> Integer -> Unit" False,F "mageDamageOne" "Spell -> Unit -> Unit" False,F "mageDamage" "Army -> Spell -> Army" True,F "head" "" False,F "tail" "" False]),(F "damage" "Unit -> Integer -> Unit" False,[F "<=" "" False,F ">=" "" False]),(F "mageDamageOne" "Spell -> Unit -> Unit" False,[F "<=" "" False]),(F "mageDamage" "Army -> Spell -> Army" True,[F "cast" "Spell -> Unit -> Unit" False]),(F "cast" "Spell -> Unit -> Unit" False,[F "<=" "" False]),(F "haskellBlast" "Army -> Army" False,[F "blastDamage" "Army -> Integer -> Army" True,F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True,F "getPosition" "[Integer] -> [(Integer, Integer)]" False,F "possibleBlastDamages" "Army -> [Integer]" True]),(F "blastDamage" "Army -> Integer -> Army" True,[F "damage" "Unit -> Integer -> Unit" False,F "<=" "" False]),(F "checkBlastDamage" "Army -> Army -> Integer" True,[F "==" "" False,F "healthDifference" "Unit -> Unit -> Integer" False]),(F "healthDifference" "Unit -> Unit -> Integer" False,[F "error" "" False]),(F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True,[F "snd" "" False,F ">" "" False,F "fst" "" False]),(F "possibleBlastDamages" "Army -> [Integer]" True,[F "checkBlastDamage" "Army -> Army -> Integer" True,F "damage" "Unit -> Integer -> Unit" False,F "damageFive" "Army -> Integer -> Army" True,F "++" "" False,F ">=" "" False,F "length" "" False]),(F "getPosition" "[Integer] -> [(Integer, Integer)]" False,[F "zip" "" False]),(F "alive" "Army -> Integer -> Bool" True,[F "||" "" False,F "==" "" False,F "&&" "" False]),(F "firstAlive" "Army -> Army" True,[F "&&" "" False,F "/=" "" False]),(F "damageFive" "Army -> Integer -> Army" True,[F "damage" "Unit -> Integer -> Unit" False]),(F "multiHeal" "Health -> Army -> Army" True,[F "<=" "" False,F "==" "" False,F "healOne" "Health -> Unit -> Unit" False,F "tooLong" "Integer -> [a] -> Bool" True,F "getAlive" "Army -> Army" True,F "getHealAmount" "Integer -> Army -> Integer" False,F "&&" "" False,F "/=" "" False]),(F "healOne" "Health -> Unit -> Unit" False, []),(F "getHealAmount" "Integer -> Army -> Integer" False,[F "fromIntegral" "" False,F "length" "" False,F "getAlive" "Army -> Army" True,F "/=" "" False]),(F "tooLong" "Integer -> [a] -> Bool" True,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "over" "Army -> Bool" True,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" True,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True]),(F "finalBattle" "Health -> Health -> OneVOne" False,[F "oneTurn" "Health -> Health -> String -> OneVOne" True]),(F "oneTurn" "Health -> Health -> String -> OneVOne" True,[F "<=" "" False,F "&&" "" False,F "==" "" False,F "<" "" False,F ">" "" False,F "error" "" False])]),
        (testFileEqual "tests/test_files/test4.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "isUnitAlive" "Unit -> Bool" False,[]),(F "getAliveUnits" "Army -> Army" True,[F "isUnitAlive" "Unit -> Bool" False]),(F "getDeadUnits" "Army -> Army" True,[F "isUnitAlive" "Unit -> Bool" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "getAliveUnits" "Army -> Army" True,F "getDeadUnits" "Army -> Army" True]),(F "over" "Army -> Bool" False,[F "==" "" False,F "getAliveUnits" "Army -> Army" True]),(F "damageUnitBy" "Integer -> Unit -> Unit" False,[F ">" "" False]),(F "damageUnitBySpell" "Unit -> Spell -> Unit" False,[F ">" "" False]),(F "damageArmyBySpell" "Army -> Spell -> Army" True,[F "damageUnitBySpell" "Unit -> Spell -> Unit" False]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F "damageUnitBySpell" "Unit -> Spell -> Unit" False,F "damageArmyBySpell" "Army -> Spell -> Army" True]),(F "getHealth" "Unit -> Health" False,[]),(F "dmgOnArea" "Army -> Integer -> Health" True,[F ">" "" False,F "getHealth" "Unit -> Health" False]),(F "maxBlast" "Army -> Health -> Health" True,[F "tail" "" False,F "dmgOnArea" "Army -> Integer -> Health" True,F ">" "" False,F "==" "" False]),(F "haskellBlast" "Army -> Army" False,[F ".helper" "Army -> Int -> Army" True]),(F ".helper" "Army -> Int -> Army" True,[F "damageUnitBy" "Integer -> Unit -> Unit" False,F "&&" "" False,F "==" "" False,F "dmgOnArea" "Army -> Integer -> Health" True,F "maxBlast" "Army -> Health -> Health" True,F ">" "" False,F "<" "" False]),(F "countAliveUnits" "Army -> Integer" False,[F "toInteger" "" False,F "length" "" False,F "getAliveUnits" "Army -> Army" True]),(F "applyHealing" "Integer -> Unit -> Unit" False,[]),(F "allDead" "Army -> Bool" False,[F "all" "" False,F "isUnitDead" "Unit -> Bool" False]),(F "isUnitDead" "Unit -> Bool" False,[]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "allDead" "Army -> Bool" False,F "..helper" "Health -> Army -> Army -> Army" True]),(F "..helper" "Health -> Army -> Army -> Army" True,[F "++" "" False,F "applyHealing" "Integer -> Unit -> Unit" False,F "isUnitAlive" "Unit -> Bool" False]),(F "getCurrentHealth" "Unit -> Health" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "==" "" False,F "countAliveUnits" "Army -> Integer" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True]),(F "damageArmyBy" "Integer -> Army -> Army" True,[F "damageUnitBy" "Integer -> Unit -> Unit" False]),(F "hasDeadUnit" "Army -> Bool" False,[F "/=" "" False,F "length" "" False,F "getDeadUnits" "Army -> Army" True]),(F "applyChainHealing" "Amount -> Army -> Army" True,[F "applyHealing" "Integer -> Unit -> Unit" False]),(F "applyChainDamage" "Amount -> Army -> Army" True,[F "damageUnitBy" "Integer -> Unit -> Unit" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<=" "" False,F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True]),(F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True,[F "reverse" "" False,F "fst" "" False,F "snd" "" False,F "tail" "" False,F "head" "" False,F "damageUnitBy" "Integer -> Unit -> Unit" False,F "applyHealing" "Integer -> Unit -> Unit" False,F "&&" "" False,F "not" "" False,F "isUnitAlive" "Unit -> Bool" False,F "/=" "" False,F "==" "" False]),(F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "==" "" False,F "countAliveUnits" "Army -> Integer" False,F "formationFix" "Army -> Army" False,F "fst" "" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True,F "snd" "" False])]),
        (testFileEqual "tests/test_files/test5.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "aliveTroops" "Army -> Army" True,F "deadTroops" "Army -> Army" True]),(F "aliveTroops" "Army -> Army" True,[]),(F "deadTroops" "Army -> Army" True,[]),(F "over" "Army -> Bool" True,[]),(F "getHealth" "Unit -> Health" False,[]),(F "setHealth" "Unit -> Health -> Unit" False,[F ">" "" False]),(F "die" "Unit -> Unit" False,[]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "die" "Unit -> Unit" False,F "<=" "" False,F "getHealth" "Unit -> Health" False,F "setHealth" "Unit -> Health -> Unit" False,F "head" "" False,F "castSpell" "Mage -> Army -> Army" True,F "tail" "" False]),(F "castSpell" "Mage -> Army -> Army" True,[F "<=" "" False,F "getHealth" "Unit -> Health" False]),(F "haskellBlast" "Army -> Army" True,[F "setHealth" "Unit -> Health -> Unit" False,F "++" "" False,F "haskellBlastHelper" "Army -> Army" True,F "take" "" False,F "drop" "" False,F "==" "" False,F "sum" "" False,F "map" "" False,F "getHealth" "Unit -> Health" False,F "modifyHealths" "Army -> Army" True,F "maximumdmg" "[Integer] -> Integer" False]),(F "haskellBlastHelper" "Army -> Army" True,[F "setHealth" "Unit -> Health -> Unit" False]),(F "modifyHealths" "Army -> Army" True,[F "<=" "" False,F "getHealth" "Unit -> Health" False,F "setHealth" "Unit -> Health -> Unit" False]),(F "maximumdmg" "[Integer] -> Integer" False,[F "maximum" "" False,F "sum" "" False,F "take" "" False,F "drop" "" False,F "length" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<" "" False,F "multiHealHelper" "Health -> Army -> Army -> Army" True]),(F "multiHealHelper" "Health -> Army -> Army -> Army" True,[F "++" "" False,F "setHealth" "Unit -> Health -> Unit" False]),(F "format" "String -> String" True,[F "==" "" False])]),
        (testFileEqual "tests/test_files/test6.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "isAlive" "a -> b" False,F "isDead" "Unit -> Bool" False]),(F "isAlive" "a -> b" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "over" "Army -> Bool" True,[F "not" "" False,F "isDead" "Unit -> Bool" False]),(F "getState" "Unit -> Health" False,[]),(F "setState" "Unit -> Health -> Unit" False,[]),(F "seged" "Army -> Spell -> Army" True,[F "setState" "Unit -> Health -> Unit" False,F "getState" "Unit -> Health" False,F ">" "" False,F "makeDead" "Unit -> Unit" False]),(F "makeDead" "Unit -> Unit" False,[]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "makeDead" "Unit -> Unit" False,F "<=" "" False,F "seged" "Army -> Spell -> Army" True]),(F "bigBoiSum" "[Int] -> [Int]" False,[F "countHelper" "[Int] -> [Int]" True]),(F "countHelper" "[Int] -> [Int]" True,[F "sum" "" False,F "take" "" False,F "map" "" False,F "min" "" False,F "drop" "" False,F ">=" "" False,F "length" "" False]),(F "haskellBlast" "Army -> Army" False,[F ".seged" "Army -> Army" False]),(F ".seged" "Army -> Army" False,[F "blast" "Int -> Army -> Army" False,F "maximum" "" False,F "/=" "" False,F "map" "" False,F "decreaseHealth" "Unit -> Health -> Unit" False,F "bigBoiSum" "[Int] -> [Int]" False,F "." "" False,F "fromIntegral" "" False,F "getState" "Unit -> Health" False]),(F "blast" "Int -> Army -> Army" False,[F "map" "" False,F "&&" "" False,F ">=" "" False,F "<=" "" False,F "applyDamage" "Int -> Unit -> Unit" False,F "zip" "" False]),(F "applyDamage" "Int -> Unit -> Unit" False,[F "<=" "" False,F "fromIntegral" "" False]),(F "decreaseHealth" "Unit -> Health -> Unit" False,[F "<=" "" False]),(F "increaseHealth" "Unit -> Health -> Unit" False,[]),(F "armyLength" "Army -> Int" True,[F "." "" False,F "not" "" False,F "isDead" "Unit -> Bool" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<=" "" False,F "increaseHealth" "Unit -> Health -> Unit" False,F "..seged" "Health -> Army -> Int -> Int -> Army" True,F "fromIntegral" "" False,F "armyLength" "Army -> Int" True]),(F "..seged" "Health -> Army -> Int -> Int -> Army" True,[F "isDead" "Unit -> Bool" False,F "increaseHealth" "Unit -> Health -> Unit" False,F "&&" "" False,F "not" "" False,F "rovidebb" "Army -> Integer -> Bool" True,F ">" "" False,F "fromIntegral" "" False,F "." "" False,F "==" "" False]),(F "rovidebb" "Army -> Integer -> Bool" True,[F "." "" False,F "not" "" False,F "isDead" "Unit -> Bool" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "over" "Army -> Bool" True,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True])]),
        (testFileEqual "tests/test_files/test7.hs" [(F "showState" "State a -> String" False,[F "show" "" False]),(F "showMage" "Mage -> String" False,[F "show" "" False]),(F "eqMage" "Mage -> Mage -> Bool" False,[F "==" "" False]),(F "showUnit" "Unit -> String" False,[F "show" "" False]),(F "papi" "Mage" False,[]),(F "java" "Mage" False,[]),(F "traktor" "Mage" False,[]),(F "jani" "Mage" False,[]),(F "skver" "Mage" False,[]),(F "potionMaster" "Mage" False,[]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "." "" False,F "not" "" False]),(F ".f" "a -> b" False,[]),(F "over" "Army -> Bool" True,[]),(F "damage" "Unit -> Integer -> Unit" False,[F "<" "" False,F "setHealth" "Unit -> Health -> Unit" False,F "getHealth" "Unit -> Health" False]),(F "heal" "Unit -> Integer -> Unit" False,[F "<" "" False,F "setHealth" "Unit -> Health -> Unit" False,F "getHealth" "Unit -> Health" False]),(F "setHealth" "Unit -> Health -> Unit" False,[F "dead" "Unit -> Unit" False]),(F "getHealth" "Unit -> Health" False,[]),(F "dead" "Unit -> Unit" False,[F "<" "" False]),(F "applyDamage" "Unit -> Unit -> Unit" False,[F "dead" "Unit -> Unit" False,F "damage" "Unit -> Integer -> Unit" False]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "setHealth" "Unit -> Health -> Unit" False,F "f" "a -> b -> c -> d" True,F "getHealth" "Unit -> Health" False,F "map" "" False,F "applyDamage" "Unit -> Unit -> Unit" False]),(F "haskellDamage" "Army -> Integer" False,[F "foldl" "" False,F "..f" "a -> b -> c" False]),(F "..f" "a -> b -> c" False,[F "min" "" False,F "getHealth" "Unit -> Health" False]),(F "haskellBlast" "Army -> Army" False,[F "snd" "" False,F "...f" "a -> b -> c" True]),(F "...f" "a -> b -> c" True,[F "null" "" False,F ">" "" False,F "fst" "" False,F "take" "" False,F "drop" "" False,F "haskellDamage" "Army -> Integer" False,F "++" "" False,F "map" "" False,F "damage" "Unit -> Integer -> Unit" False]),(F "healable" "Unit -> Integer" False,[F "==" "" False,F "getHealth" "Unit -> Health" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "f" "a -> b -> c -> d" True]),(F "f" "a -> b -> c -> d" True,[F "over" "Army -> Bool" True,F "==" "" False,F "take" "" False,F "healable" "Unit -> Integer" False,F "!!" "" False,F "++" "" False,F "heal" "Unit -> Integer -> Unit" False,F "drop" "" False,F ">" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "heal" "Unit -> Integer -> Unit" False,F "<" "" False,F "d" "a -> b" False,F "fst" "" False,F "next" "a -> b" False,F "damage" "Unit -> Integer -> Unit" False,F "snd" "" False]),(F "next" "a -> b" False,[F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False]),(F "d" "a -> b" False,[]),(F "showOneVOne" "OneVOne -> String" False,[F "show" "" False])]),
        (testFileEqual "tests/test_files/test8.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "++" "" False,F "filter" "" False,F "&&" "" False,F "/=" "" False,F "||" "" False,F "==" "" False]),(F "over" "Army -> Bool" True,[F "||" "" False,F "==" "" False]),(F "checkDead" "Unit -> Unit" False,[F "<=" "" False]),(F "damage" "Unit -> Spell -> Unit" False,[F "checkDead" "Unit -> Unit" False]),(F "getDamage" "Unit -> Integer" False,[]),(F "updateArmy" "Army -> Spell -> Army" True,[F "damage" "Unit -> Spell -> Unit" False]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "damage" "Unit -> Spell -> Unit" False,F "updateArmy" "Army -> Spell -> Army" True,F "getDamage" "Unit -> Integer" False]),(F "getHealth" "Unit -> Health" False,[]),(F "healthDiffs" "[Health] -> [Health] -> [Health]" True,[]),(F "bombIt" "Army -> Integer -> Army" True,[F "damage" "Unit -> Spell -> Unit" False]),(F "calcSumDamage" "Army -> Integer" False,[F "sum" "" False,F "healthDiffs" "[Health] -> [Health] -> [Health]" True,F "map" "" False,F "getHealth" "Unit -> Health" False,F "bombIt" "Army -> Integer -> Army" True]),(F "calcSums" "Army -> [Integer]" True,[F "calcSumDamage" "Army -> Integer" False]),(F "haskellBlast" "Army -> Army" False,[F "over" "Army -> Bool" True,F "blastHelp" "Army -> Army -> Army" True]),(F "blastHelp" "Army -> Army -> Army" True,[F "bombIt" "Army -> Integer -> Army" True,F "over" "Army -> Bool" True,F "++" "" False,F "==" "" False,F "calcSumDamage" "Army -> Integer" False,F "maximum" "" False,F "calcSums" "Army -> [Integer]" True]),(F "heal" "Unit -> Integer -> Unit" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "multiHeal" "Health -> Army -> Army" False,[F "over" "Army -> Bool" True,F "<" "" False,F "multiHelp" "Health -> Army -> Army -> Army" True]),(F "multiHelp" "Health -> Army -> Army -> Army" True,[F "++" "" False,F "isDead" "Unit -> Bool" False,F "heal" "Unit -> Integer -> Unit" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "over" "Army -> Bool" True,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True]),(F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "++" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<" "" False,F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True]),(F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True,[F "damage" "Unit -> Spell -> Unit" False,F "/=" "" False,F "heal" "Unit -> Integer -> Unit" False,F "==" "" False,F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "&&" "" False,F "isDead" "Unit -> Bool" False])]),
        (testFileEqual "tests/test_files/test9.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F ".helper" "Army -> Army -> Army" True]),(F ".helper" "Army -> Army -> Army" True,[F "reverse" "" False]),(F "over" "Army -> Bool" True,[]),(F "fight" "EnemyArmy -> Army -> Army" False,[F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True]),(F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True,[F "damageAllSpells" "[Spell] -> Unit -> Unit" True,F "doDamage" "Amount -> Unit -> Unit" False,F "getDamageE" "Unit -> Amount" False,F "getSpell" "Unit -> Spell" False]),(F "getDamageE" "Unit -> Amount" False,[]),(F "doDamage" "Amount -> Unit -> Unit" False,[F "<" "" False]),(F "getSpell" "Unit -> Spell" False,[F "id" "" False]),(F "damageAllSpells" "[Spell] -> Unit -> Unit" True,[F "<" "" False]),(F "haskellBlast" "Army -> Army" False,[F "damageNext5" "Army -> Army" False,F "<" "" False,F "length" "" False,F "doMostDamage" "Army -> [Health] -> Army" True,F "getAllSumZero" "Army -> [Health]" True,F "==" "" False,F "maximum" "" False,F "getAllSum" "Army -> [Health]" True,F "findAndDamage" "Army -> [Health] -> Army" True,F ">=" "" False]),(F "getHealth" "Unit -> Health" False,[]),(F "sumHealth" "Army -> Health" True,[F "getHealth" "Unit -> Health" False]),(F "getAllSum" "Army -> [Health]" True,[F "tail" "" False,F "any" "" False,F "take" "" False,F "map" "" False,F "getHealth" "Unit -> Health" False,F "sumHealth" "Army -> Health" True]),(F "damageNext5" "Army -> Army" False,[F "...helper" "Army -> Int -> Army" True]),(F "...helper" "Army -> Int -> Army" True,[F "==" "" False,F "doDamage" "Amount -> Unit -> Unit" False]),(F "findAndDamage" "Army -> [Health] -> Army" True,[F "damageNext5" "Army -> Army" False,F ">=" "" False]),(F "doMostDamage" "Army -> [Health] -> Army" True,[F "damageNext5" "Army -> Army" False,F "==" "" False,F "maximum" "" False,F "getAllSumZero" "Army -> [Health]" True]),(F "getAllSumZero" "Army -> [Health]" True,[F "sumHealth" "Army -> Health" True,F "take" "" False,F "tail" "" False]),(F "multiHeal" "Health -> Army -> Army" False,[F "<" "" False,F "over" "Army -> Bool" True,F "helper" "Health -> Army -> Army -> Army" True]),(F "helper" "Health -> Army -> Army -> Army" True,[F "multiHeal" "Health -> Army -> Army" False,F "reverse" "" False,F "++" "" False,F "updateHp" "Health -> Unit -> Unit" False]),(F "updateHp" "Health -> Unit -> Unit" False,[]),(F "isDead" "Unit -> Bool" False,[]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "over" "Army -> Bool" True,F "not" "" False,F "formationFix" "Army -> Army" False,F "multiHeal" "Health -> Army -> Army" False,F "haskellBlast" "Army -> Army" False,F "fight" "EnemyArmy -> Army -> Army" False]),(F "finalBattle" "Health -> Health -> OneVOne" True,[F "<=" "" False,F "fst" "" False,F "getMyDamage" "(Health, Health) -> (Health, Health)" False,F "snd" "" False,F "getHMDamage" "(Health, Health) -> (Health, Health)" False]),(F "getHMDamage" "(Health, Health) -> (Health, Health)" False,[F "<" "" False,F "&&" "" False,F ">=" "" False,F ">" "" False,F "zeroIfNeg" "Health -> Health" False]),(F "getMyDamage" "(Health, Health) -> (Health, Health)" False,[F "<" "" False,F ">" "" False,F "zeroIfNeg" "Health -> Health" False]),(F "zeroIfNeg" "Health -> Health" False,[F "<" "" False])]    ),
        (testFileEqual "tests/test_files/test10.hs" [(F "showState" "a -> b" False,[F "show" "" False]),(F "showMage" "a -> b" False,[F "show" "" False]),(F "eqMage" "a -> b -> c" False,[F "==" "" False]),(F "showUnit" "a -> b" False,[F "show" "" False]),(F "showOneVOne" "a -> b" False,[F "show" "" False]),(F "getHealthEntity" "Entity -> Health" False,[]),(F "setHealthEntity" "Entity -> Health -> Entity" False,[]),(F "getHealthMage" "Mage -> Health" False,[]),(F "setHealthMage" "Mage -> Health -> Mage" False,[]),(F "mageState" "State Mage -> String" False,[F "showMage" "a -> b" False]),(F "entState" "State Entity -> String" False,[F "show" "" False]),(F "formationFix" "Army -> Army" False,[F "formationHelper" "Army -> Army -> Army -> Army" True]),(F "formationHelper" "Army -> Army -> Army -> Army" True,[F "++" "" False,F "==" "" False,F "showUnit" "a -> b" False]),(F "over" "Army -> Bool" True,[F "&&" "" False,F "==" "" False,F "showUnit" "a -> b" False]),(F "fight" "EnemyArmy -> Army -> Army" True,[F "++" "" False,F "isDead" "Unit -> Bool" False,F "die" "Unit -> Unit" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "mageFightHelp" "Mage -> Army -> Army" True]),(F "mageFightHelp" "Mage -> Army -> Army" True,[F "++" "" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F ">" "" False,F "die" "Unit -> Unit" False]),(F "haskellBlast" "Army -> Army" True,[F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F ">" "" False,F "die" "Unit -> Unit" False,F "++" "" False,F "minusfive" "Unit -> Unit" False,F "<=" "" False,F "listcount" "Army -> Int" True,F "reverse" "" False,F "drop" "" False,F "minusfivetimesfive" "Army -> Int -> Army" True,F "blastHelper" "Army -> Army -> Army" True]),(F "blastHelper" "Army -> Army -> Army" True,[F "max" "" False,F ">" "" False,F "sumoffivehp" "Army -> Integer -> Health" True]),(F "sumoffivehp" "Army -> Integer -> Health" True,[F "isDead" "Unit -> Bool" False,F ">=" "" False,F "getUnitHealth" "Unit -> Health" False]),(F "nextFiveAllDead" "Army -> Integer -> Bool" True,[F "&&" "" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False]),(F "minusfive" "Unit -> Unit" False,[F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False,F ">" "" False,F "die" "Unit -> Unit" False]),(F "listcount" "Army -> Int" True,[]),(F "getUnitHealth" "Unit -> Health" False,[F "getHealthEntity" "Entity -> Health" False,F "getHealthMage" "Mage -> Health" False]),(F "minusfivetimesfive" "Army -> Int -> Army" True,[F "isDead" "Unit -> Bool" False,F "minusfive" "Unit -> Unit" False]),(F "multiHeal" "Health -> Army -> Army" True,[F "<=" "" False,F "isDead" "Unit -> Bool" False,F "healOne" "Unit -> Unit" False,F "healhelper" "Health -> Army -> Army -> Army" True]),(F "healhelper" "Health -> Army -> Army -> Army" True,[F "++" "" False,F "maradek" "OneVOne -> String" True,F "==" "" False,F "notDeads" "Army -> Army" False,F "isDead" "Unit -> Bool" False,F "healOne" "Unit -> Unit" False]),(F "healOne" "Unit -> Unit" False,[F "isDead" "Unit -> Bool" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False]),(F "setUnitHealth" "Unit -> Health -> Unit" False,[F "setHealthEntity" "Entity -> Health -> Entity" False,F "setHealthMage" "Mage -> Health -> Mage" False]),(F "isDead" "Unit -> Bool" False,[F "==" "" False,F "show" "" False]),(F "battle" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "==" "" False,F "notDeads" "Army -> Army" False,F "formationFix" "Army -> Army" False,F "whyMyTeam" "Army -> EnemyArmy -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True]),(F "whyMyTeam" "Army -> EnemyArmy -> Army" False,[F "multiHeal" "Health -> Army -> Army" True,F "haskellBlast" "Army -> Army" True,F "fight" "EnemyArmy -> Army -> Army" True]),(F "notDeads" "Army -> Army" False,[F "filter" "" False,F "not" "" False,F "==" "" False,F "show" "" False]),(F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,[F "<=" "" False,F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True]),(F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True,[F "++" "" False,F "healN" "Unit -> Health -> Unit" False,F "&&" "" False,F "isDead" "Unit -> Bool" False,F "dmgN" "Unit -> Health -> Unit" False,F ">" "" False]),(F "healN" "Unit -> Health -> Unit" False,[F "isDead" "Unit -> Bool" False,F "setUnitHealth" "Unit -> Health -> Unit" False,F "getUnitHealth" "Unit -> Health" False]),(F "dmgN" "Unit -> Health -> Unit" False,[F "isDead" "Unit -> Bool" False,F "die" "Unit -> Unit" False,F "<=" "" False,F "getUnitHealth" "Unit -> Health" False,F "setUnitHealth" "Unit -> Health -> Unit" False]),(F "die" "Unit -> Unit" False,[]),(F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True,[F "&&" "" False,F "==" "" False,F "notDeads" "Army -> Army" False,F "formationFix" "Army -> Army" False,F "fst" "" False,F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False,F "whyMyTeam" "Army -> EnemyArmy -> Army" False,F "fight" "EnemyArmy -> Army -> Army" True,F "snd" "" False]),(F "maradek" "OneVOne -> String" True,[F "++" "" False,F "show" "" False])])
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (handleRecursion $ functionCalls (parseInFile (prep decl)) ((parseInFile (prep decl)) ++ map toFun preludeFuns) (prep decl)) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

getCallGraphsTests :: [Test]
getCallGraphsTests = [
        (testFileEqual "tests/test_files/test1.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]}]},Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "findBestStart" "Int -> Int -> Int -> Int" True, edges = fromList []},Vertex {node = F "potDam" "Unit -> Int" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "showDuel" "OneVOne -> String" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test2.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "spellDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "spellDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "sorszam" "Army -> [(Unit, Int)]" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "bgroups" "Army -> [Int]" True, edges = fromList [Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "bgroups" "Army -> [Int]" True, edges = fromList [Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "sorszam" "Army -> [(Unit, Int)]" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "healHelper" "Health -> Army -> Int -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "longerThan" "Int -> [a] -> Bool" False, edges = fromList [Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []}]}]},Vertex {node = F "healHelper" "Health -> Army -> Int -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []},Vertex {node = F "longerThan" "Int -> [a] -> Bool" False, edges = fromList [Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []}]}]),
        (testFileEqual "tests/test_files/test3.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []},Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "alive" "Army -> Integer -> Bool" True, edges = fromList []},Vertex {node = F "firstAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]}]},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" False, edges = fromList [Vertex {node = F "oneTurn" "Health -> Health -> String -> OneVOne" True, edges = fromList []}]},Vertex {node = F "oneTurn" "Health -> Health -> String -> OneVOne" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test4.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []},Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "countAliveUnits" "Army -> Integer" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getCurrentHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "countAliveUnits" "Army -> Integer" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "damageArmyBy" "Integer -> Army -> Army" True, edges = fromList [Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "hasDeadUnit" "Army -> Bool" False, edges = fromList [Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "applyChainHealing" "Amount -> Army -> Army" True, edges = fromList [Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyChainDamage" "Amount -> Army -> Army" True, edges = fromList [Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "countAliveUnits" "Army -> Integer" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]}]),
        (testFileEqual "tests/test_files/test5.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "deadTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "aliveTroops" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "aliveTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "deadTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "castSpell" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "castSpell" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "maximumdmg" "[Integer] -> Integer" False, edges = fromList []},Vertex {node = F "haskellBlastHelper" "Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "modifyHealths" "Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlastHelper" "Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "modifyHealths" "Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "maximumdmg" "[Integer] -> Integer" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHealHelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "multiHealHelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "format" "String -> String" True, edges = fromList []}]),
        (testFileEqual "tests/test_files/test6.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]},Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]}]},Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]}]}]),
        (testFileEqual "tests/test_files/test7.hs" [Vertex {node = F "showState" "State a -> String" False, edges = fromList []},Vertex {node = F "showMage" "Mage -> String" False, edges = fromList []},Vertex {node = F "eqMage" "Mage -> Mage -> Bool" False, edges = fromList []},Vertex {node = F "showUnit" "Unit -> String" False, edges = fromList []},Vertex {node = F "papi" "Mage" False, edges = fromList []},Vertex {node = F "java" "Mage" False, edges = fromList []},Vertex {node = F "traktor" "Mage" False, edges = fromList []},Vertex {node = F "jani" "Mage" False, edges = fromList []},Vertex {node = F "skver" "Mage" False, edges = fromList []},Vertex {node = F "potionMaster" "Mage" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F ".f" "a -> b" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyDamage" "Unit -> Unit -> Unit" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyDamage" "Unit -> Unit -> Unit" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "...f" "a -> b -> c" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "...f" "a -> b -> c" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "next" "a -> b" False, edges = fromList []},Vertex {node = F "d" "a -> b" False, edges = fromList []}]},Vertex {node = F "next" "a -> b" False, edges = fromList [Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "d" "a -> b" False, edges = fromList []}]}]},Vertex {node = F "d" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "OneVOne -> String" False, edges = fromList []}]),
        (testFileEqual "tests/test_files/test8.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []},Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]},Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]),
        (testFileEqual "tests/test_files/test9.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []}]},Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" True, edges = fromList [Vertex {node = F "getMyDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "getHMDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]}]},Vertex {node = F "getHMDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "getMyDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]),
        (testFileEqual "tests/test_files/test10.hs" [Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []},Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "mageState" "State Mage -> String" False, edges = fromList [Vertex {node = F "showMage" "a -> b" False, edges = fromList []}]},Vertex {node = F "entState" "State Entity -> String" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}]},Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "nextFiveAllDead" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]},Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]},Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]},Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "whyMyTeam" "Army -> EnemyArmy -> Army" False, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}]}]},Vertex {node = F "whyMyTeam" "Army -> EnemyArmy -> Army" False, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "dmgN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "healN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "dmgN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "healN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "healN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "dmgN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "whyMyTeam" "Army -> EnemyArmy -> Army" False, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "dmgN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "healN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}]}]},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}])
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (getCallGraphs (map (\ (F n _ _) -> n) $ parseInFile (prep decl)) (prep decl)) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")

genWholeGraphTests :: [Test]
genWholeGraphTests = [
        (testFileEqual "tests/test_files/test1.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "helper" "EnemyArmy -> Army -> MageAttacks -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "applyMageAttacks" "Unit -> MageAttacks -> Unit" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "remainHeal" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "healOne" "Army -> Health -> Army" True, edges = fromList [Vertex {node = F "healUnit" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Health -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "showDuel" "OneVOne -> String" True, edges = fromList []},Vertex {node = F "findBestStart" "Int -> Int -> Int -> Int" True, edges = fromList []},Vertex {node = F "potDam" "Unit -> Int" False, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test2.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelper" "[Int] -> [(Unit, Int)] -> Army" True, edges = fromList [Vertex {node = F "applyDamage" "[Unit] -> [Unit]" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "sorszam" "Army -> [(Unit, Int)]" False, edges = fromList []},Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "bgroups" "Army -> [Int]" True, edges = fromList [Vertex {node = F "blastGroup" "Army -> Int -> Int" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "healHelper" "Health -> Army -> Int -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "heal" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "longerThan" "Int -> [a] -> Bool" False, edges = fromList [Vertex {node = F "isNonEmpty" "[a] -> Bool" False, edges = fromList []}]}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "spellDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "hpCheck" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "damageCal" "Unit -> Integer -> Unit" False, edges = fromList []}]},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test3.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" False, edges = fromList [Vertex {node = F "oneTurn" "Health -> Health -> String -> OneVOne" True, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "getDead" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "mageDamage" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "cast" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "mageDamageOne" "Spell -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "tooLong" "Integer -> [a] -> Bool" True, edges = fromList []},Vertex {node = F "healOne" "Health -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "getHealAmount" "Integer -> Army -> Integer" False, edges = fromList [Vertex {node = F "getAlive" "Army -> Army" True, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "possibleBlastDamages" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "checkBlastDamage" "Army -> Army -> Integer" True, edges = fromList [Vertex {node = F "healthDifference" "Unit -> Unit -> Integer" False, edges = fromList []}]},Vertex {node = F "damageFive" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "maxBlastDamage" "[(Integer, Integer)] -> Integer" True, edges = fromList []},Vertex {node = F "getPosition" "[Integer] -> [(Integer, Integer)]" False, edges = fromList []},Vertex {node = F "blastDamage" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]},Vertex {node = F "alive" "Army -> Integer -> Bool" True, edges = fromList []},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "firstAlive" "Army -> Army" True, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test4.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "countAliveUnits" "Army -> Integer" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getCurrentHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "damageArmyBy" "Integer -> Army -> Army" True, edges = fromList [Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "applyChainHealing" "Amount -> Army -> Army" True, edges = fromList [Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "countAliveUnits" "Army -> Integer" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "allDead" "Army -> Bool" False, edges = fromList [Vertex {node = F "isUnitDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "helper" "Amount -> (Army, EnemyArmy) -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "applyHealing" "Integer -> Unit -> Unit" False, edges = fromList []},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "maxBlast" "Army -> Health -> Health" True, edges = fromList [Vertex {node = F "dmgOnArea" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "damageArmyBySpell" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damageUnitBySpell" "Unit -> Spell -> Unit" False, edges = fromList []}]},Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" False, edges = fromList [Vertex {node = F "getAliveUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "applyChainDamage" "Amount -> Army -> Army" True, edges = fromList [Vertex {node = F "damageUnitBy" "Integer -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "hasDeadUnit" "Army -> Bool" False, edges = fromList [Vertex {node = F "getDeadUnits" "Army -> Army" True, edges = fromList [Vertex {node = F "isUnitAlive" "Unit -> Bool" False, edges = fromList []}]}]},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test5.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "deadTroops" "Army -> Army" True, edges = fromList []},Vertex {node = F "aliveTroops" "Army -> Army" True, edges = fromList []}]},Vertex {node = F "format" "String -> String" True, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHealHelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "castSpell" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "maximumdmg" "[Integer] -> Integer" False, edges = fromList []},Vertex {node = F "haskellBlastHelper" "Army -> Army" True, edges = fromList [Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]},Vertex {node = F "modifyHealths" "Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test6.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "isAlive" "a -> b" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "seged" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "setState" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "makeDead" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F ".seged" "Army -> Army" False, edges = fromList [Vertex {node = F "decreaseHealth" "Unit -> Health -> Unit" False, edges = fromList []},Vertex {node = F "blast" "Int -> Army -> Army" False, edges = fromList [Vertex {node = F "applyDamage" "Int -> Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "getState" "Unit -> Health" False, edges = fromList []},Vertex {node = F "bigBoiSum" "[Int] -> [Int]" False, edges = fromList [Vertex {node = F "countHelper" "[Int] -> [Int]" True, edges = fromList []}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "armyLength" "Army -> Int" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "..seged" "Health -> Army -> Int -> Int -> Army" True, edges = fromList [Vertex {node = F "rovidebb" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "increaseHealth" "Unit -> Health -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test7.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "eqMage" "Mage -> Mage -> Bool" False, edges = fromList []},Vertex {node = F "papi" "Mage" False, edges = fromList []},Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "applyDamage" "Unit -> Unit -> Unit" False, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]},Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "jani" "Mage" False, edges = fromList []},Vertex {node = F "showOneVOne" "OneVOne -> String" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "f" "a -> b -> c -> d" True, edges = fromList [Vertex {node = F "healable" "Unit -> Integer" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]},Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "traktor" "Mage" False, edges = fromList []},Vertex {node = F "skver" "Mage" False, edges = fromList []},Vertex {node = F "showMage" "Mage -> String" False, edges = fromList []},Vertex {node = F "showUnit" "Unit -> String" False, edges = fromList []},Vertex {node = F "java" "Mage" False, edges = fromList []},Vertex {node = F ".f" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "State a -> String" False, edges = fromList []},Vertex {node = F "potionMaster" "Mage" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "...f" "a -> b -> c" True, edges = fromList [Vertex {node = F "damage" "Unit -> Integer -> Unit" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "setHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "dead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "..f" "a -> b -> c" False, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]}]}),
        (testFileEqual "tests/test_files/test8.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelp" "Amount -> Int -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "combineTupleOfLists" "(Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList []},Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "getDamage" "Unit -> Integer" False, edges = fromList []},Vertex {node = F "updateArmy" "Army -> Spell -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList []},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "blastHelp" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "calcSums" "Army -> [Integer]" True, edges = fromList [Vertex {node = F "calcSumDamage" "Army -> Integer" False, edges = fromList [Vertex {node = F "bombIt" "Army -> Integer -> Army" True, edges = fromList [Vertex {node = F "damage" "Unit -> Spell -> Unit" False, edges = fromList [Vertex {node = F "checkDead" "Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []},Vertex {node = F "healthDiffs" "[Health] -> [Health] -> [Health]" True, edges = fromList []}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "multiHelp" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "heal" "Unit -> Integer -> Unit" False, edges = fromList []},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList []}]}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test9.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" False, edges = fromList [Vertex {node = F "..helper" "EnemyArmy -> Army -> [Spell] -> Army" True, edges = fromList [Vertex {node = F "getSpell" "Unit -> Spell" False, edges = fromList []},Vertex {node = F "getDamageE" "Unit -> Amount" False, edges = fromList []},Vertex {node = F "damageAllSpells" "[Spell] -> Unit -> Unit" True, edges = fromList []},Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F ".helper" "Army -> Army -> Army" True, edges = fromList []}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" False, edges = fromList [Vertex {node = F "over" "Army -> Bool" True, edges = fromList []},Vertex {node = F "helper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "updateHp" "Health -> Unit -> Unit" False, edges = fromList []}]}]},Vertex {node = F "haskellBlast" "Army -> Army" False, edges = fromList [Vertex {node = F "doMostDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "getAllSumZero" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]},Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "findAndDamage" "Army -> [Health] -> Army" True, edges = fromList [Vertex {node = F "damageNext5" "Army -> Army" False, edges = fromList [Vertex {node = F "...helper" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "doDamage" "Amount -> Unit -> Unit" False, edges = fromList []}]}]}]},Vertex {node = F "getAllSum" "Army -> [Health]" True, edges = fromList [Vertex {node = F "sumHealth" "Army -> Health" True, edges = fromList [Vertex {node = F "getHealth" "Unit -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "finalBattle" "Health -> Health -> OneVOne" True, edges = fromList [Vertex {node = F "getMyDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]},Vertex {node = F "getHMDamage" "(Health, Health) -> (Health, Health)" False, edges = fromList [Vertex {node = F "zeroIfNeg" "Health -> Health" False, edges = fromList []}]}]},Vertex {node = F "showMage" "a -> b" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []},Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}),
        (testFileEqual "tests/test_files/test10.hs" $ Vertex {node = F "dummy" "" False, edges = fromList [Vertex {node = F "mageState" "State Mage -> String" False, edges = fromList [Vertex {node = F "showMage" "a -> b" False, edges = fromList []}]},Vertex {node = F "battle" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "whyMyTeam" "Army -> EnemyArmy -> Army" False, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}]}]},Vertex {node = F "eqMage" "a -> b -> c" False, edges = fromList []},Vertex {node = F "battleWithChain" "Army -> EnemyArmy -> Maybe Army" True, edges = fromList [Vertex {node = F "whyMyTeam" "Army -> EnemyArmy -> Army" False, edges = fromList [Vertex {node = F "fight" "EnemyArmy -> Army -> Army" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "mageFightHelp" "Mage -> Army -> Army" True, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]},Vertex {node = F "haskellBlast" "Army -> Army" True, edges = fromList [Vertex {node = F "minusfivetimesfive" "Army -> Int -> Army" True, edges = fromList [Vertex {node = F "minusfive" "Unit -> Unit" False, edges = fromList [Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []}]},Vertex {node = F "listcount" "Army -> Int" True, edges = fromList []},Vertex {node = F "blastHelper" "Army -> Army -> Army" True, edges = fromList [Vertex {node = F "sumoffivehp" "Army -> Integer -> Health" True, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "multiHeal" "Health -> Army -> Army" True, edges = fromList [Vertex {node = F "healhelper" "Health -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "healOne" "Unit -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "maradek" "OneVOne -> String" True, edges = fromList []}]}]}]},Vertex {node = F "notDeads" "Army -> Army" False, edges = fromList []},Vertex {node = F "chain" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy)" False, edges = fromList [Vertex {node = F "chainHelper" "Amount -> (Army, EnemyArmy) -> (Army, EnemyArmy) -> (Army, EnemyArmy)" True, edges = fromList [Vertex {node = F "dmgN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "die" "Unit -> Unit" False, edges = fromList []},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "healN" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "isDead" "Unit -> Bool" False, edges = fromList []},Vertex {node = F "setUnitHealth" "Unit -> Health -> Unit" False, edges = fromList [Vertex {node = F "setHealthMage" "Mage -> Health -> Mage" False, edges = fromList []},Vertex {node = F "setHealthEntity" "Entity -> Health -> Entity" False, edges = fromList []}]},Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]}]}]},Vertex {node = F "formationFix" "Army -> Army" False, edges = fromList [Vertex {node = F "formationHelper" "Army -> Army -> Army -> Army" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]}]}]},Vertex {node = F "over" "Army -> Bool" True, edges = fromList [Vertex {node = F "showUnit" "a -> b" False, edges = fromList []}]},Vertex {node = F "nextFiveAllDead" "Army -> Integer -> Bool" True, edges = fromList [Vertex {node = F "getUnitHealth" "Unit -> Health" False, edges = fromList [Vertex {node = F "getHealthMage" "Mage -> Health" False, edges = fromList []},Vertex {node = F "getHealthEntity" "Entity -> Health" False, edges = fromList []}]}]},Vertex {node = F "entState" "State Entity -> String" False, edges = fromList []},Vertex {node = F "showOneVOne" "a -> b" False, edges = fromList []},Vertex {node = F "showState" "a -> b" False, edges = fromList []}]})
    ] where
        testFileEqual path value =
            TestCase (do
                x <- parseFile path
                case x of
                    ParseOk (Module _ _ _ decl) -> assertEqual path (wholeCodeGraph decl) value
                    _ -> assertFailure "Test file couldn't be parsed, possibly syntax error in file.")